require('dotenv').config(); // –ó–∞–≥—Ä—É–∂–∞–µ—Ç –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è –∏–∑ .env —Ñ–∞–π–ª–∞
const express = require('express');
const axios = require('axios'); // –î–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —é–∑–µ—Ä–Ω–µ–π–º–∞ –≤ Twitter
const cors = require('cors'); // –î–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è CORS
const mongoose = require('mongoose'); // –î–ª—è —Ä–∞–±–æ—Ç—ã —Å MongoDB

const app = express();
const port = process.env.PORT || 3000;

// --- –ü–û–î–ö–õ–Æ–ß–ï–ù–ò–ï –ö MONGODB ---
mongoose.connect(process.env.MONGODB_URI)
  .then(() => console.log('–ü–æ–¥–∫–ª—é—á–µ–Ω–æ –∫ MongoDB!'))
  .catch(err => console.error('–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ MongoDB:', err));

// --- –û–ü–†–ï–î–ï–õ–ï–ù–ò–ï –°–•–ï–ú–´ –ò –ú–û–î–ï–õ–ò MONGODB ---
const userSchema = new mongoose.Schema({
    nickname: { type: String, required: true, unique: true },
    country: { type: String, required: true },
    lat: { type: Number, required: true },
    lng: { type: Number, required: true },
    avatar: { type: String },
    twitter_username: { type: String, unique: true, sparse: true },
    twitter_profile_url: { type: String },
    ip_address: { type: String } // –î–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è IP-–∞–¥—Ä–µ—Å–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
}, { timestamps: true });

const User = mongoose.model('User ', userSchema);

// --- MIDDLEWARE ---
app.use(express.json());
app.use(express.urlencoded({ extended: true }));

// Middleware –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ä–µ–∞–ª—å–Ω–æ–≥–æ IP-–∞–¥—Ä–µ—Å–∞
app.use((req, res, next) => {
    req.realIP = req.headers['x-forwarded-for']?.split(',')[0] || 
                 req.headers['x-real-ip'] || 
                 req.connection.remoteAddress || 
                 req.socket.remoteAddress || 
                 req.ip;
    next();
});

// –ù–∞—Å—Ç—Ä–æ–π–∫–∞ CORS
app.use(cors({
    origin: ['https://mantlemap.xyz', 'http://localhost:8080'],
    methods: ['GET', 'POST'],
    allowedHeaders: ['Content-Type']
}));

// --- –§–£–ù–ö–¶–ò–Ø –î–õ–Ø –ü–†–û–í–ï–†–ö–ò –°–£–©–ï–°–¢–í–û–í–ê–ù–ò–Ø TWITTER –ê–ö–ö–ê–£–ù–¢–ê ---
async function checkTwitterUsername(username) {
    if (!username || username.trim() === '') {
        return false;
    }

    const cleanUsername = username.replace(/^@/, '');
    console.log(`üîç –ü—Ä–æ–≤–µ—Ä—è–µ–º Twitter –∞–∫–∫–∞—É–Ω—Ç: @${cleanUsername}`);

    // –ü—Ä–æ–≤–µ—Ä–∫–∞ —á–µ—Ä–µ–∑ Twitter API
    try {
        const response = await axios.get(`https://api.twitter.com/2/users/by/username/${cleanUsername}`, {
            headers: {
                'Authorization': `Bearer ${process.env.TWITTER_BEARER_TOKEN}`
            }
        });

        if (response.status === 200) {
            console.log(`‚úÖ Twitter –∞–∫–∫–∞—É–Ω—Ç @${cleanUsername} –Ω–∞–π–¥–µ–Ω —á–µ—Ä–µ–∑ API`);
            return true;
        }
    } catch (error) {
        console.error(`–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ Twitter –∞–∫–∫–∞—É–Ω—Ç–∞: ${error.response?.status} - ${error.message}`);
        return false; // –ï—Å–ª–∏ –æ—à–∏–±–∫–∞, —é–∑–µ—Ä–Ω–µ–π–º –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
    }

    return false; // –ï—Å–ª–∏ –∞–∫–∫–∞—É–Ω—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω
}

// --- –ú–ê–†–®–†–£–¢–´ API ---

// –ü—Ä–æ—Å—Ç–æ–π –º–∞—Ä—à—Ä—É—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ä–∞–±–æ—Ç—ã —Å–µ—Ä–≤–µ—Ä–∞
app.get('/', (req, res) => {
    res.send('API Server is running!');
});

// –ú–∞—Ä—à—Ä—É—Ç –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏–∑ MongoDB
app.get('/api/users', async (req, res) => {
    try {
        const users = await User.find({});
        console.log(`–ü–æ–ª—É—á–µ–Ω–æ ${users.length} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏–∑ –ë–î.`);
        res.status(200).json(users);
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏–∑ MongoDB:', error);
        res.status(500).json({ message: '–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π.' });
    }
});

// –ú–∞—Ä—à—Ä—É—Ç –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
app.post('/api/users', async (req, res) => {
    const { nickname, country, lat, lng, avatar, twitter_username, twitter_profile_url } = req.body;
    const ipAddress = req.realIP; // –ü–æ–ª—É—á–∞–µ–º IP-–∞–¥—Ä–µ—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è

    console.log('–ü–æ–ª—É—á–µ–Ω—ã –¥–∞–Ω–Ω—ã–µ:', { nickname, country, twitter_username, ip: ipAddress });

    // 1. –í–∞–ª–∏–¥–∞—Ü–∏—è –Ω–∞ —Å—Ç–æ—Ä–æ–Ω–µ —Å–µ—Ä–≤–µ—Ä–∞: –ø—Ä–æ–≤–µ—Ä–∫–∞ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã—Ö –ø–æ–ª–µ–π
    if (!nickname || !country || lat === undefined || lng === undefined) {
        console.warn('–û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è:', { nickname, country, lat, lng });
        return res.status(400).json({ message: '–û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è (–Ω–∏–∫–Ω–µ–π–º, —Å—Ç—Ä–∞–Ω–∞ –∏–ª–∏ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã).' });
    }

    // 2. –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏—è Twitter –∞–∫–∫–∞—É–Ω—Ç–∞
    const twitterExists = await checkTwitterUsername(twitter_username);
    if (!twitterExists) {
        return res.status(400).json({ 
            message: '–£–∫–∞–∑–∞–Ω–Ω—ã–π Twitter –∞–∫–∫–∞—É–Ω—Ç –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç. –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π Twitter.' 
        });
    }

    // 3. –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ —É–Ω–∏–∫–∞–ª—å–Ω–æ—Å—Ç—å –ø–æ IP-–∞–¥—Ä–µ—Å—É
    const userCount = await User.countDocuments({ ip_address: ipAddress });
    const maxAccountsPerIP = 1; // –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∞–∫–∫–∞—É–Ω—Ç–æ–≤ –Ω–∞ –æ–¥–∏–Ω IP

    if (userCount >= maxAccountsPerIP) {
        return res.status(403).json({ message: `–î–æ—Å—Ç–∏–≥–Ω—É—Ç–æ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∞–∫–∫–∞—É–Ω—Ç–æ–≤ (${maxAccountsPerIP}) –Ω–∞ –æ–¥–∏–Ω IP-–∞–¥—Ä–µ—Å.` });
    }

    try {
        const newUser  = new User({
            nickname,
            country,
            lat,
            lng,
            avatar,
            twitter_username: twitter_username.replace(/^@/, ''),
            twitter_profile_url: twitter_profile_url || `https://twitter.com/${twitter_username.replace(/^@/, '')}`,
            ip_address: ipAddress // –°–æ—Ö—Ä–∞–Ω—è–µ–º IP-–∞–¥—Ä–µ—Å
        });

        await newUser .save();
        console.log(`–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${nickname} –∏–∑ ${country} —É—Å–ø–µ—à–Ω–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω –∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤ –ë–î!`);
        res.status(201).json(newUser );

    } catch (error) {
        if (error.code === 11000) {
            console.warn('–ü–æ–ø—ã—Ç–∫–∞ –¥—É–±–ª–∏–∫–∞—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', error.message);
            return res.status(409).json({ message: '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å —Ç–∞–∫–∏–º –Ω–∏–∫–Ω–µ–π–º–æ–º –∏–ª–∏ –∏–º–µ–Ω–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è Twitter —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç.', details: error.message });
        }

        console.error('–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –≤ –ë–î:', error.message);
        return res.status(500).json({ message: '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–ø—Ä–æ—Å–∞.', details: error.message });
    }
});

// --- –ó–ê–ü–£–°–ö –°–ï–†–í–ï–†–ê ---
app.listen(port, () => {
    console.log(`–°–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω –Ω–∞ –ø–æ—Ä—Ç—É ${port}`);
});
