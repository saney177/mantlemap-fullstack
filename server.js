require('dotenv').config();
const express = require('express');
const axios = require('axios'); // –í–æ–∑–º–æ–∂–Ω–æ, axios –Ω–µ –ø–æ–Ω–∞–¥–æ–±–∏—Ç—Å—è –¥–ª—è Twitter API V2, –µ—Å–ª–∏ twitter-api-v2 –≤—Å–µ –ø–æ–∫—Ä—ã–≤–∞–µ—Ç.
const cors = require('cors');
const mongoose = require('mongoose');

// –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º TwitterApi –∏–∑ –±–∏–±–ª–∏–æ—Ç–µ–∫–∏
const { TwitterApi } = require('twitter-api-v2');

const app = express();
const port = process.env.PORT || 3000;

// --- –ü–û–î–ö–õ–Æ–ß–ï–ù–ò–ï –ö MONGODB ---
mongoose.connect(process.env.MONGODB_URI)
  .then(() => console.log('–ü–æ–¥–∫–ª—é—á–µ–Ω–æ –∫ MongoDB!'))
  .catch(err => console.error('–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ MongoDB:', err));

// --- –û–ü–†–ï–î–ï–õ–ï–ù–ò–ï –°–•–ï–ú–´ –ò –ú–û–î–ï–õ–ò MONGODB ---
const userSchema = new mongoose.Schema({
    nickname: { type: String, required: true, unique: true },
    country: { type: String, required: true },
    lat: { type: Number, required: true },
    lng: { type: Number, required: true },
    avatar: { type: String },
    twitter_username: { type: String, unique: true, sparse: true },
    twitter_profile_url: { type: String },
    ip_address: { type: String }
}, { timestamps: true });

const User = mongoose.model('User', userSchema);

// --- MIDDLEWARE ---
app.use(express.json());
app.use(express.urlencoded({ extended: true }));

// Middleware –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ä–µ–∞–ª—å–Ω–æ–≥–æ IP-–∞–¥—Ä–µ—Å–∞
app.use((req, res, next) => {
    req.realIP = req.headers['x-forwarded-for']?.split(',')[0] ||
                         req.headers['x-real-ip'] ||
                         req.connection.remoteAddress ||
                         req.socket.remoteAddress ||
                         req.ip;
    next();
});

// –ù–∞—Å—Ç—Ä–æ–π–∫–∞ CORS
app.use(cors({
    origin: ['https://mantlemap.xyz', 'http://localhost:8080'],
    methods: ['GET', 'POST'],
    allowedHeaders: ['Content-Type']
}));

// --- –ò–ù–ò–¶–ò–ê–õ–ò–ó–ê–¶–ò–Ø TWITTER API –ö–õ–ò–ï–ù–¢–ê ---
let twitterClient;
if (process.env.TWITTER_BEARER_TOKEN) {
    twitterClient = new TwitterApi(process.env.TWITTER_BEARER_TOKEN);
    console.log('‚úÖ Twitter API –∫–ª–∏–µ–Ω—Ç –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω —Å Bearer Token.');
} else {
    console.warn('‚ö†Ô∏è TWITTER_BEARER_TOKEN –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω. –ü—Ä–æ–≤–µ—Ä–∫–∏ Twitter –º–æ–≥—É—Ç –±—ã—Ç—å –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã.');
}

// --- –§–£–ù–ö–¶–ò–Ø –î–õ–Ø –ü–†–û–í–ï–†–ö–ò –ü–û–î–ü–ò–°–ö–ò –ù–ê MANTLE (–ï—Å–ª–∏ –≤—ã —Ö–æ—Ç–∏—Ç–µ —ç—Ç–æ –¥–µ–ª–∞—Ç—å —á–µ—Ä–µ–∑ Twitter API v2) ---
// –≠—Ç–æ —Å–ª–æ–∂–Ω–µ–µ —Å–¥–µ–ª–∞—Ç—å —Å App-only Bearer Token, —Ç–∞–∫ –∫–∞–∫ App-only —Ç–æ–∫–µ–Ω—ã –≤ –æ—Å–Ω–æ–≤–Ω–æ–º –¥–ª—è –ø—É–±–ª–∏—á–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö.
// –î–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ–¥–ø–∏—Å–∫–∏ –æ–¥–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–∞ –¥—Ä—É–≥–æ–≥–æ –æ–±—ã—á–Ω–æ —Ç—Ä–µ–±—É–µ—Ç—Å—è user-context OAuth 2.0.
// –ï—Å–ª–∏ –≤–∞–º –Ω—É–∂–Ω–∞ —ç—Ç–∞ —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å, RapidAPI –∏–ª–∏ –¥—Ä—É–≥–∞—è —Å—Ç–æ—Ä–æ–Ω–Ω–∏–π API –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—Ä–æ—â–µ.
// –û–¥–Ω–∞–∫–æ, Twitter API v2 *–ø–æ–∑–≤–æ–ª—è–µ—Ç* –ø—Ä–æ–≤–µ—Ä—è—Ç—å –ø–æ–¥–ø–∏—Å–∫–∏, –Ω–æ —Ç—Ä–µ–±—É–µ—Ç –¥—Ä—É–≥–æ–≥–æ —Ç–∏–ø–∞ —Ç–æ–∫–µ–Ω–∞ (OAuth 2.0 User Context).
// –ü–æ–∫–∞ –æ—Å—Ç–∞–≤–∏–º —Ñ—É–Ω–∫—Ü–∏—é –∫–∞–∫ –µ—Å—Ç—å, –ø—Ä–µ–¥–ø–æ–ª–∞–≥–∞—è, —á—Ç–æ RapidAPI –¥–ª—è —ç—Ç–æ–≥–æ.
async function checkIfUserFollowsMantle(userTwitterUsername) {
    const cleanUserTwitterUsername = userTwitterUsername.replace(/^@/, '');
    const mantleOfficialScreenName = 'Mantle_Official';

    console.log(`üîç –ü—Ä–æ–≤–µ—Ä—è–µ–º, –ø–æ–¥–ø–∏—Å–∞–Ω –ª–∏ @<span class="math-inline">\{cleanUserTwitterUsername\} –Ω–∞ @</span>{mantleOfficialScreenName}`);

    if (!process.env.RAPIDAPI_KEY) {
        console.warn('‚ö†Ô∏è RapidAPI –∫–ª—é—á –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω. –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–ø–∏—Å–∫–∏ –ø—Ä–æ–ø—É—â–µ–Ω–∞.');
        return false;
    }

    try {
        const url = `https://twitter-api45.p.rapidapi.com/checkfollow.php?user=<span class="math-inline">\{cleanUserTwitterUsername\}&follows\=</span>{mantleOfficialScreenName}`;

        const options = {
            method: 'GET',
            headers: {
                'x-rapidapi-key': process.env.RAPIDAPI_KEY,
                'x-rapidapi-host': 'twitter-api45.p.rapidapi.com'
            },
            timeout: 8000
        };

        const response = await axios(url, options);
        const result = response.data;

        if (result && typeof result.is_follow === 'boolean') {
            if (result.is_follow === true) {
                console.log(`‚úÖ @<span class="math-inline">\{cleanUserTwitterUsername\} –ø–æ–¥–ø–∏—Å–∞–Ω –Ω–∞ @</span>{mantleOfficialScreenName}`);
                return true;
            } else {
                console.log(`‚ùå @<span class="math-inline">\{cleanUserTwitterUsername\} –ù–ï –ø–æ–¥–ø–∏—Å–∞–Ω –Ω–∞ @</span>{mantleOfficialScreenName}`);
                return false;
            }
        } else {
            console.warn(`‚ö†Ô∏è –ù–µ–æ–∂–∏–¥–∞–Ω–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –æ—Ç–≤–µ—Ç–∞ –æ—Ç RapidAPI:`, result);
            return false;
        }

    } catch (error) {
        console.error(`–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –ø–æ–¥–ø–∏—Å–∫–∏:`, error.response?.status, error.response?.data?.message || error.message);
        return false;
    }
}

// --- –§–£–ù–ö–¶–ò–Ø –î–õ–Ø –ü–†–û–í–ï–†–ö–ò –°–£–©–ï–°–¢–í–û–í–ê–ù–ò–Ø TWITTER –ê–ö–ö–ê–£–ù–¢–ê (–û–°–ù–û–í–ù–û–ô –ú–ï–¢–û–î) ---
async function checkTwitterUsername(username) {
    if (!username || username.trim() === '') {
        console.log('‚ö†Ô∏è Twitter username –ø—É—Å—Ç –∏–ª–∏ –Ω–µ —É–∫–∞–∑–∞–Ω.');
        return false;
    }

    const cleanUsername = username.replace(/^@/, '');
    console.log(`üîç –ü—Ä–æ–≤–µ—Ä—è–µ–º Twitter –∞–∫–∫–∞—É–Ω—Ç: @${cleanUsername} —á–µ—Ä–µ–∑ Twitter API v2.`);

    if (!twitterClient) {
        console.error('‚ùå Twitter API –∫–ª–∏–µ–Ω—Ç –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω. –ù–µ–≤–æ–∑–º–æ–∂–Ω–æ –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –∞–∫–∫–∞—É–Ω—Ç.');
        return false;
    }

    try {
        // –ò—Å–ø–æ–ª—å–∑—É–µ–º Twitter API v2 –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ –ø–æ –µ–≥–æ —é–∑–µ—Ä–Ω–µ–π–º—É
        const user = await twitterClient.v2.usersByUsernames([cleanUsername]);

        if (user && user.data && user.data.length > 0) {
            console.log(`‚úÖ Twitter –∞–∫–∫–∞—É–Ω—Ç @${cleanUsername} –Ω–∞–π–¥–µ–Ω —á–µ—Ä–µ–∑ Twitter API v2.`);
            return true;
        } else {
            console.log(`‚ùå Twitter –∞–∫–∫–∞—É–Ω—Ç @${cleanUsername} –ù–ï –Ω–∞–π–¥–µ–Ω —á–µ—Ä–µ–∑ Twitter API v2.`);
            return false;
        }
    } catch (error) {
        console.error(`–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ Twitter –∞–∫–∫–∞—É–Ω—Ç–∞ @${cleanUsername} —á–µ—Ä–µ–∑ Twitter API v2:`, error.response?.status, error.response?.data?.message || error.message);
        // –ï—Å–ª–∏ –µ—Å—Ç—å –æ—à–∏–±–∫–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä, 404, 429 Rate Limit, –∏–ª–∏ –¥—Ä—É–≥–∞—è), —Å—á–∏—Ç–∞–µ–º, —á—Ç–æ –∞–∫–∫–∞—É–Ω—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ –Ω–µ–≤–æ–∑–º–æ–∂–Ω–æ –ø—Ä–æ–≤–µ—Ä–∏—Ç—å
        return false;
    }
}

// --- –§–£–ù–ö–¶–ò–Ø –ü–†–û–í–ï–†–ö–ò –ß–ï–†–ï–ó –ú–ù–û–ñ–ï–°–¢–í–ï–ù–ù–´–ï API (–¢–µ–ø–µ—Ä—å –æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ, –∫–∞–∫ –∑–∞–ø–∞—Å–Ω–æ–π –≤–∞—Ä–∏–∞–Ω—Ç) ---
// –≠—Ç—É —Ñ—É–Ω–∫—Ü–∏—é –º–æ–∂–Ω–æ –æ—Å—Ç–∞–≤–∏—Ç—å –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ –∏–ª–∏ –∫–∞–∫ —Ä–µ–∑–µ—Ä–≤–Ω—ã–π –≤–∞—Ä–∏–∞–Ω—Ç,
// –Ω–æ –æ—Å–Ω–æ–≤–Ω–æ–π –ø—Ä–æ–≤–µ—Ä–∫–æ–π –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –ø—Ä—è–º–æ–π –≤—ã–∑–æ–≤ Twitter API v2.
// –ï—Å–ª–∏ –æ–Ω–∞ –Ω–µ –Ω—É–∂–Ω–∞, –º–æ–∂–µ—Ç–µ —É–¥–∞–ª–∏—Ç—å –µ–µ.
async function checkTwitterMultipleAPIs(username) {
    if (!process.env.RAPIDAPI_KEY) {
        console.log('‚ö†Ô∏è RapidAPI –∫–ª—é—á –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω, –ø—Ä–æ–ø—É—Å–∫ —Ä–µ–∑–µ—Ä–≤–Ω–æ–π –ø—Ä–æ–≤–µ—Ä–∫–∏.');
        return false;
    }

    const apis = [
        {
            name: 'RapidAPI Twitter API v2',
            url: `https://twitter-api47.p.rapidapi.com/v2/user/by/username/${username}`,
            headers: {
                'X-RapidAPI-Key': process.env.RAPIDAPI_KEY,
                'X-RapidAPI-Host': 'twitter-api47.p.rapidapi.com'
            }
        },
        {
            name: 'Twitter API v1',
            url: `https://twitter-api45.p.rapidapi.com/user.php?username=${username}`,
            headers: {
                'X-RapidAPI-Key': process.env.RAPIDAPI_KEY,
                'X-RapidAPI-Host': 'twitter-api45.p.rapidapi.com'
            }
        }
    ];

    for (const api of apis) {
        try {
            console.log(`üîÑ –ü—Ä–æ–±—É–µ–º <span class="math-inline">\{api\.name\} –¥–ª—è @</span>{username} (—Ä–µ–∑–µ—Ä–≤–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞)`);
            const response = await axios.get(api.url, {
                headers: api.headers,
                timeout: 8000
            });

            if (response.data && (response.data.username || response.data.data?.username)) {
                console.log(`‚úÖ @${username} –Ω–∞–π–¥–µ–Ω —á–µ—Ä–µ–∑ ${api.name} (—Ä–µ–∑–µ—Ä–≤–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞)`);
                return true;
            }
        } catch (error) {
            console.log(`‚ö†Ô∏è ${api.name} –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω: ${error.response?.status || error.message}`);
        }
    }

    return false;
}

// --- –§–£–ù–ö–¶–ò–Ø BLACKLIST –ü–†–û–í–ï–†–ö–ò (–ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –¥–ª—è –æ—Ç—Å–µ–≤–∞ —Å–ø–∞–º–∞, –µ—Å–ª–∏ Twitter API –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç) ---
// –≠—Ç–æ —Ñ—É–Ω–∫—Ü–∏—è –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –≤—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω–æ–π –∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ API –Ω–µ –¥–∞–ª–∏ —á–µ—Ç–∫–æ–≥–æ –æ—Ç–≤–µ—Ç–∞.
// –í –±–æ–ª—å—à–∏–Ω—Å—Ç–≤–µ —Å–ª—É—á–∞–µ–≤, –µ—Å–ª–∏ Twitter API v2 –Ω–µ –ø–æ–¥—Ç–≤–µ—Ä–¥–∏–ª —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ,
// —Ç–æ —ç—Ç–æ–≥–æ –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ, –∏ –±–ª—ç–∫–ª–∏—Å—Ç –Ω–µ –Ω—É–∂–µ–Ω –¥–ª—è *–ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è*.
// –û–¥–Ω–∞–∫–æ, –æ–Ω –º–æ–∂–µ—Ç –±—ã—Ç—å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω –¥–ª—è *–¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–≥–æ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏—è* –ø–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω—ã—Ö –∏–º–µ–Ω.
function checkTwitterUsernameBlacklist(username) {
    console.log(`üîç –ó–∞–ø—É—Å–∫ –±–ª—ç–∫–ª–∏—Å—Ç –ø—Ä–æ–≤–µ—Ä–∫–∏ –¥–ª—è @${username}`);
    const lowerUsername = username.toLowerCase();

    const obviousSpamPatterns = [
        /^[a-z]{15,}$/,
        /^(.)\1{6,}$/,
        /^[qwertyuiop]{8,}$/i,
        /^[asdfghjkl]{8,}$/i,
        /^[zxcvbnm]{8,}$/i,
        /^test[0-9]{3,}$/i,
        /^user[0-9]{3,}$/i,
        /^[0-9]{10,}$/,
        /^[bcdfghjklmnpqrstvwxyz]{15,}$/i,
        /hjklfdsapoiuytrewq|mnbvcxzasdfgh/,
        /^(admin|root|system|support|moderator|bot|test|demo|fuck|shit|asshole)$/i,
        /^.{0,2}$/,
    ];

    for (const pattern of obviousSpamPatterns) {
        if (pattern.test(lowerUsername)) {
            console.log(`‚ùå @${username} –æ—Ç–∫–ª–æ–Ω–µ–Ω –∫–∞–∫ —Å–ø–∞–º/–Ω–µ–≤–∞–ª–∏–¥–Ω—ã–π –ø–æ –ø–∞—Ç—Ç–µ—Ä–Ω—É: ${pattern}`);
            return true;
        }
    }

    if (username.length > 15 || username.length < 3 || /^[0-9_]+$/.test(username)) {
         console.log(`‚ùå @${username} –æ—Ç–∫–ª–æ–Ω–µ–Ω –ø–æ –æ–±—â–µ–π –¥–ª–∏–Ω–µ/—Å–æ—Å—Ç–∞–≤—É.`);
         return true;
    }

    console.log(`‚úÖ @${username} –ø—Ä–æ—à–µ–ª –±–ª—ç–∫–ª–∏—Å—Ç –ø—Ä–æ–≤–µ—Ä–∫—É.`);
    return false;
}


// --- –ú–ê–†–®–†–£–¢–´ API ---
app.get('/', (req, res) => {
    res.send('API Server is running!');
});

app.get('/api/users', async (req, res) => {
    try {
        const users = await User.find({});
        console.log(`–ü–æ–ª—É—á–µ–Ω–æ ${users.length} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏–∑ –ë–î.`);
        res.status(200).json(users);
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏–∑ MongoDB:', error);
        res.status(500).json({ message: '–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π.' });
    }
});

app.post('/api/users', async (req, res) => {
    const { nickname, country, lat, lng, avatar, twitter_username, twitter_profile_url } = req.body;
    const ipAddress = req.realIP;

    console.log('–ü–æ–ª—É—á–µ–Ω—ã –¥–∞–Ω–Ω—ã–µ:', { nickname, country, twitter_username, ip: ipAddress });

    // –í–∞–ª–∏–¥–∞—Ü–∏—è –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã—Ö –ø–æ–ª–µ–π
    if (!nickname || !country || lat === undefined || lng === undefined) {
        console.warn('–û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è:', { nickname, country, lat, lng });
        return res.status(400).json({ message: '–û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è (–Ω–∏–∫–Ω–µ–π–º, —Å—Ç—Ä–∞–Ω–∞ –∏–ª–∏ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã).' });
    }

    // –ü—Ä–æ–≤–µ—Ä–∫–∞ Twitter username
    if (!twitter_username || twitter_username.trim() === '') {
        return res.status(400).json({ message: 'Twitter username –æ–±—è–∑–∞—Ç–µ–ª–µ–Ω –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏.' });
    }

    try {
        // –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏—è Twitter –∞–∫–∫–∞—É–Ω—Ç–∞
        console.log(`–ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ Twitter –∞–∫–∫–∞—É–Ω—Ç–∞: @${twitter_username}`);
        const twitterExists = await checkTwitterUsername(twitter_username);

        // –ï—Å–ª–∏ –æ—Å–Ω–æ–≤–Ω–æ–π API –Ω–µ –ø–æ–¥—Ç–≤–µ—Ä–¥–∏–ª, –º–æ–∂–Ω–æ –ø–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å —Ä–µ–∑–µ—Ä–≤–Ω—ã–µ (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
        let finalTwitterExists = twitterExists;
        if (!twitterExists) {
             console.log(`–û—Å–Ω–æ–≤–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ Twitter API v2 –Ω–µ –ø–æ–¥—Ç–≤–µ—Ä–¥–∏–ª–∞ –∞–∫–∫–∞—É–Ω—Ç. –ü—Ä–æ–±—É–µ–º —Ä–µ–∑–µ—Ä–≤–Ω—ã–µ API.`);
             finalTwitterExists = await checkTwitterMultipleAPIs(twitter_username);
        }

        // –ï—Å–ª–∏ –ø–æ—Å–ª–µ –≤—Å–µ—Ö API –∞–∫–∫–∞—É–Ω—Ç –Ω–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω,
        // –º–æ–∂–Ω–æ —Å–¥–µ–ª–∞—Ç—å –µ—â–µ –æ–¥–Ω—É –ø—Ä–æ–≤–µ—Ä–∫—É –Ω–∞ "—Å–ø–∞–º–Ω–æ—Å—Ç—å" –∏–º–µ–Ω–∏,
        // —Ö–æ—Ç—è –µ—Å–ª–∏ API —Å–∫–∞–∑–∞–ª–∏ "–Ω–µ—Ç", —Ç–æ —ç—Ç–æ —É–∂–µ –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ.
        if (!finalTwitterExists) {
            // –≠—Ç–æ –º–µ—Å—Ç–æ, –≥–¥–µ –≤—ã –º–æ–∂–µ—Ç–µ —Ä–µ—à–∏—Ç—å, –Ω—É–∂–Ω–æ –ª–∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –±–ª—ç–∫–ª–∏—Å—Ç
            // –¥–ª—è *–¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–π* —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏, –µ—Å–ª–∏ API –Ω–µ –¥–∞–ª–∏ —á–µ—Ç–∫–æ–≥–æ –æ—Ç–≤–µ—Ç–∞.
            // –í –¥–∞–Ω–Ω–æ–º —Å–ª—É—á–∞–µ, –µ—Å–ª–∏ API –≥–æ–≤–æ—Ä—è—Ç "–Ω–µ—Ç", —Ç–æ —ç—Ç–æ —É–∂–µ "–Ω–µ—Ç".
            console.log(`–ê–∫–∫–∞—É–Ω—Ç @${twitter_username} –Ω–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω —á–µ—Ä–µ–∑ Twitter API.`);
            return res.status(400).json({
                message: '–£–∫–∞–∑–∞–Ω–Ω—ã–π Twitter –∞–∫–∫–∞—É–Ω—Ç –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –∏–ª–∏ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—Ä–æ–≤–µ—Ä–µ–Ω. –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π Twitter.'
            });
        }

        // –ü—Ä–æ–≤–µ—Ä–∫–∞ —É–Ω–∏–∫–∞–ª—å–Ω–æ—Å—Ç–∏ –ø–æ IP
        const existingUserByIP = await User.findOne({
            ip_address: ipAddress,
            ip_address: { $exists: true, $ne: null }
        });

        if (existingUserByIP) {
            console.warn(`–ü–æ–ø—ã—Ç–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ —Å —É–∂–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–Ω–æ–≥–æ IP: ${ipAddress}`);
            return res.status(403).json({
                message: '–° —ç—Ç–æ–≥–æ IP-–∞–¥—Ä–µ—Å–∞ —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω –∞–∫–∫–∞—É–Ω—Ç. –†–∞–∑—Ä–µ—à–µ–Ω —Ç–æ–ª—å–∫–æ –æ–¥–∏–Ω –∞–∫–∫–∞—É–Ω—Ç –Ω–∞ IP-–∞–¥—Ä–µ—Å.'
            });
        }

        // –°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        const newUser = new User({
            nickname,
            country,
            lat,
            lng,
            avatar,
            twitter_username: twitter_username.replace(/^@/, ''),
            twitter_profile_url: twitter_profile_url || `https://twitter.com/${twitter_username.replace(/^@/, '')}`,
            ip_address: ipAddress
        });

        await newUser.save();
        console.log(`–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å <span class="math-inline">\{nickname\} \(@</span>{twitter_username}) –∏–∑ ${country} —É—Å–ø–µ—à–Ω–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω!`);

        res.status(201).json({
            message: '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É—Å–ø–µ—à–Ω–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω!',
            user: newUser
        });

    } catch (error) {
        if (error.code === 11000) {
            console.warn('–ü–æ–ø—ã—Ç–∫–∞ –¥—É–±–ª–∏–∫–∞—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', error.message);

            if (error.message.includes('nickname')) {
                return res.status(409).json({ message: '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å —Ç–∞–∫–∏–º –Ω–∏–∫–Ω–µ–π–º–æ–º —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç.' });
            } else if (error.message.includes('twitter_username')) {
                return res.status(409).json({ message: '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å —Ç–∞–∫–∏–º Twitter –∞–∫–∫–∞—É–Ω—Ç–æ–º —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω.' });
            } else {
                return res.status(409).json({ message: '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å —Ç–∞–∫–∏–º–∏ –¥–∞–Ω–Ω—ã–º–∏ —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç.' });
            }
        }

        console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –≤ –ë–î:', error.message);
        return res.status(500).json({
            message: '–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞ –ø—Ä–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.',
            details: error.message
        });
    }
});

app.post('/api/check-twitter', async (req, res) => {
    const { username } = req.body;

    if (!username) {
        return res.status(400).json({ message: 'Twitter username –Ω–µ —É–∫–∞–∑–∞–Ω.' });
    }

    try {
        const exists = await checkTwitterUsername(username);
        // –ï—Å–ª–∏ –ø—Ä—è–º–æ–π API –Ω–µ –ø–æ–¥—Ç–≤–µ—Ä–¥–∏–ª, –º–æ–∂–Ω–æ –ø–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å —Ä–µ–∑–µ—Ä–≤–Ω—ã–µ
        let finalExists = exists;
        if (!exists) {
            console.log(`–û—Å–Ω–æ–≤–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ Twitter API v2 –Ω–µ –ø–æ–¥—Ç–≤–µ—Ä–¥–∏–ª–∞ –∞–∫–∫–∞—É–Ω—Ç. –ü—Ä–æ–±—É–µ–º —Ä–µ–∑–µ—Ä–≤–Ω—ã–µ API –¥–ª—è check-twitter.`);
            finalExists = await checkTwitterMultipleAPIs(username);
        }

        res.json({ exists: finalExists, username: username.replace(/^@/, '') });
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ Twitter:', error);
        res.status(500).json({ message: '–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ Twitter –∞–∫–∫–∞—É–Ω—Ç–∞.' });
    }
});

// --- –ó–ê–ü–£–°–ö –°–ï–†–í–ï–†–ê ---
app.listen(port, () => {
    console.log(`–°–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω –Ω–∞ –ø–æ—Ä—Ç—É ${port}`);
});
