require('dotenv').config();
const express = require('express');
const axios = require('axios');
const cors = require('cors');
const mongoose = require('mongoose');

const app = express();
const port = process.env.PORT || 3000;

// --- –ü–û–î–ö–õ–Æ–ß–ï–ù–ò–ï –ö MONGODB ---
mongoose.connect(process.env.MONGODB_URI)
  .then(() => console.log('–ü–æ–¥–∫–ª—é—á–µ–Ω–æ –∫ MongoDB!'))
  .catch(err => console.error('–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ MongoDB:', err));

// --- –û–ü–†–ï–î–ï–õ–ï–ù–ò–ï –°–•–ï–ú–´ –ò –ú–û–î–ï–õ–ò MONGODB ---
const userSchema = new mongoose.Schema({
    nickname: { type: String, required: true, unique: true },
    country: { type: String, required: true },
    lat: { type: Number, required: true },
    lng: { type: Number, required: true },
    avatar: { type: String },
    twitter_username: { type: String, unique: true, sparse: true },
    twitter_profile_url: { type: String },
    ip_address: { type: String }
}, { timestamps: true });

const User = mongoose.model('User', userSchema);

// --- MIDDLEWARE ---
app.use(express.json());
app.use(express.urlencoded({ extended: true }));

// Middleware –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ä–µ–∞–ª—å–Ω–æ–≥–æ IP-–∞–¥—Ä–µ—Å–∞
app.use((req, res, next) => {
    req.realIP = req.headers['x-forwarded-for']?.split(',')[0] || 
                 req.headers['x-real-ip'] || 
                 req.connection.remoteAddress || 
                 req.socket.remoteAddress || 
                 req.ip;
    next();
});

// –ù–∞—Å—Ç—Ä–æ–π–∫–∞ CORS
app.use(cors({
    origin: ['https://mantlemap.xyz', 'http://localhost:8080'],
    methods: ['GET', 'POST'],
    allowedHeaders: ['Content-Type']
}));



// --- –§–£–ù–ö–¶–ò–Ø –î–õ–Ø –ü–†–û–í–ï–†–ö–ò –°–£–©–ï–°–¢–í–û–í–ê–ù–ò–Ø TWITTER –ê–ö–ö–ê–£–ù–¢–ê ---

// –õ–æ–∫–∞–ª—å–Ω—ã–π –∫—ç—à (–Ω–∞ –≤—Ä–µ–º—è –∂–∏–∑–Ω–∏ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è)
const usernameCache = {};

// –°–ø–∏—Å–æ–∫ Nitter –∑–µ—Ä–∫–∞–ª
const nitterInstances = [
    'https://nitter.net',
    'https://nitter.privacydev.net',
    'https://nitter.poast.org',
    'https://nitter.kavin.rocks'
];

async function checkTwitterUsername(username) {
    if (!username || typeof username !== 'string') return false;

    const cleanUsername = username.trim().replace(/^@/, '').toLowerCase();

    if (usernameCache[cleanUsername] !== undefined) {
        console.log(`üì¶ –í–∑—è—Ç–æ –∏–∑ –∫—ç—à–∞: @${cleanUsername} ‚Üí ${usernameCache[cleanUsername]}`);
        return usernameCache[cleanUsername];
    }

    console.log(`üîç –ü—Ä–æ–≤–µ—Ä—è–µ–º Twitter –∞–∫–∫–∞—É–Ω—Ç: @${cleanUsername}`);

    // –ü–æ–ø—Ä–æ–±—É–µ–º –≤—Å–µ –∑–µ—Ä–∫–∞–ª–∞ Nitter
    for (const instance of nitterInstances) {
        try {
            const url = `${instance}/${cleanUsername}`;
            const response = await axios.get(url, {
                timeout: 5000,
                validateStatus: status => status < 500
            });

            if (response.status === 200 &&
                !response.data.includes("User not found") &&
                !response.data.includes("Nothing here") &&
                !response.data.includes("502 Bad Gateway")) {
                console.log(`‚úÖ –ù–∞–π–¥–µ–Ω —á–µ—Ä–µ–∑ Nitter: ${url}`);
                usernameCache[cleanUsername] = true;
                return true;
            }
        } catch (error) {
            console.log(`‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ ${instance}: ${error.message}`);
        }
    }

    // –ü–æ–ø—Ä–æ–±—É–µ–º –Ω–∞–ø—Ä—è–º—É—é —á–µ—Ä–µ–∑ Twitter
    try {
        const twitterUrl = `https://twitter.com/${cleanUsername}`;
        const response = await axios.get(twitterUrl, {
            timeout: 5000,
            validateStatus: status => status < 500,
            headers: {
                'User-Agent': 'Mozilla/5.0'
            }
        });

        if (response.status === 200 &&
            !response.data.includes("This account doesn‚Äôt exist") &&
            !response.data.includes("Account suspended")) {
            console.log(`‚úÖ –ù–∞–π–¥–µ–Ω —á–µ—Ä–µ–∑ twitter.com`);
            usernameCache[cleanUsername] = true;
            return true;
        }
    } catch (error) {
        console.log(`‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ—Å—Ç—É–ø–µ –∫ twitter.com: ${error.message}`);
    }

    console.log(`‚ùå –ê–∫–∫–∞—É–Ω—Ç @${cleanUsername} –Ω–µ –Ω–∞–π–¥–µ–Ω`);
    usernameCache[cleanUsername] = false;
    return false;
}

// --- –§–£–ù–ö–¶–ò–Ø WHITELIST –ü–†–û–í–ï–†–ö–ò ---
// –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è whitelist —Å –±–æ–ª–µ–µ —Å—Ç—Ä–æ–≥–∏–º–∏ –ø—Ä–∞–≤–∏–ª–∞–º–∏
function enhancedTwitterUsernameWhitelist(username) {
    console.log(`üîç –°—Ç—Ä–æ–≥–∞—è whitelist –ø—Ä–æ–≤–µ—Ä–∫–∞ –¥–ª—è @${username}`);
    
    // –ë–∞–∑–æ–≤—ã–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ –¥–ª–∏–Ω—ã –∏ —Å–∏–º–≤–æ–ª–æ–≤
    if (username.length < 3 || username.length > 15) {
        console.log(`‚ùå @${username} - –Ω–µ–≤–µ—Ä–Ω–∞—è –¥–ª–∏–Ω–∞ (${username.length})`);
        return false;
    }
    
    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –¥–æ–ø—É—Å—Ç–∏–º—ã–µ —Å–∏–º–≤–æ–ª—ã Twitter
    if (!/^[a-zA-Z0-9_]+$/.test(username)) {
        console.log(`‚ùå @${username} - –Ω–µ–¥–æ–ø—É—Å—Ç–∏–º—ã–µ —Å–∏–º–≤–æ–ª—ã`);
        return false;
    }
  
    
    // –°–¢–†–û–ì–ò–ï –ü–†–û–í–ï–†–ö–ò –ù–ê –°–ü–ê–ú (—Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–π —Å–ø–∏—Å–æ–∫)
    const strictSpamPatterns = [
        // –°–ª—É—á–∞–π–Ω—ã–µ –±—É–∫–≤–µ–Ω–Ω—ã–µ –∫–æ–º–±–∏–Ω–∞—Ü–∏
        /^(.)\1{4,}$/,                   // –ø–æ–≤—Ç–æ—Ä—è—é—â–∏–µ—Å—è —Å–∏–º–≤–æ–ª—ã (aaaaa)
        
        // –¢–µ—Å—Ç–æ–≤—ã–µ/—Ñ–µ–π–∫–æ–≤—ã–µ –∞–∫–∫–∞—É–Ω—Ç—ã
        /^test[0-9]{2,}$/i,              // test123456
        /^user[0-9]{2,}$/i,              // user123456
        /^fake[a-z0-9]{2,}$/i,           // fake...
        /^spam[a-z0-9]{2,}$/i,           // spam...
        /^bot[a-z0-9]{2,}$/i,            // bot...
        
        // –¢–æ–ª—å–∫–æ —Ü–∏—Ñ—Ä—ã –∏–ª–∏ —Ç–æ–ª—å–∫–æ —Ü–∏—Ñ—Ä—ã —Å –±—É–∫–≤–∞–º–∏
        /^[0-9]{4,}$/,                   // —Ç–æ–ª—å–∫–æ —Ü–∏—Ñ—Ä—ã 6+
        /^[a-z][0-9]{6,}$/i,             // –±—É–∫–≤–∞ + –º–Ω–æ–≥–æ —Ü–∏—Ñ—Ä
        
        // –°–ª—É—á–∞–π–Ω—ã–µ –∫–æ–º–±–∏–Ω–∞—Ü–∏–∏
        /^[bcdfghjklmnpqrstvwxyz]{6,}$/i, // —Ç–æ–ª—å–∫–æ —Å–æ–≥–ª–∞—Å–Ω—ã–µ 8+
        /^[aeiou]{4,}$/i,                // —Ç–æ–ª—å–∫–æ –≥–ª–∞—Å–Ω—ã–µ 6
        
    ];
    
    for (const pattern of strictSpamPatterns) {
        if (pattern.test(username)) {
            console.log(`‚ùå @${username} –æ—Ç–∫–ª–æ–Ω–µ–Ω –∫–∞–∫ —Å–ø–∞–º: ${pattern}`);
            return false;
        }
    }
    
    }

// –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ IP (—Ç–æ—á–Ω–æ–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ)
async function checkIPUniqueness(currentIP, User) {
    console.log(`üîç –ü—Ä–æ–≤–µ—Ä—è–µ–º —É–Ω–∏–∫–∞–ª—å–Ω–æ—Å—Ç—å IP: ${currentIP}`);
    
    try {
        // –¢–û–ß–ù–û–ï —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ IP-–∞–¥—Ä–µ—Å–∞
        const existingUserByIP = await User.findOne({ 
            ip_address: currentIP  // –£–±–∏—Ä–∞–µ–º –ª–∏—à–Ω–∏–µ —É—Å–ª–æ–≤–∏—è
        });
        
        if (existingUserByIP) {
            console.warn(`‚ùå IP ${currentIP} —É–∂–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º: ${existingUserByIP.nickname} (@${existingUserByIP.twitter_username})`);
            return false;
        }
        
        console.log(`‚úÖ IP ${currentIP} —Å–≤–æ–±–æ–¥–µ–Ω`);
        return true;
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ IP:', error);
        return true; // –í —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏ —Ä–∞–∑—Ä–µ—à–∞–µ–º —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é
    }
}

// –û–±–Ω–æ–≤–ª–µ–Ω–Ω–∞—è –≥–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –ø—Ä–æ–≤–µ—Ä–∫–∏ Twitter
async function checkTwitterUsername(username) {
    if (!username || username.trim() === '') {
        return false;
    }

    const cleanUsername = username.replace(/^@/, '');
    console.log(`üîç –°—Ç—Ä–æ–≥–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ Twitter –∞–∫–∫–∞—É–Ω—Ç–∞: @${cleanUsername}`);
  
    
    // 2. –ü–æ–ø—ã—Ç–∫–∞ –≤–Ω–µ—à–Ω–µ–π –ø—Ä–æ–≤–µ—Ä–∫–∏ (–µ—Å–ª–∏ whitelist –ø—Ä–æ–π–¥–µ–Ω)
    console.log(`‚úÖ @${cleanUsername} –ø—Ä–æ—à–µ–ª whitelist, –ø—Ä–æ–≤–µ—Ä—è–µ–º –≤–Ω–µ—à–Ω–∏–µ –∏—Å—Ç–æ—á–Ω–∏–∫–∏...`);

}
// --- –§–£–ù–ö–¶–ò–Ø –ü–†–û–í–ï–†–ö–ò –ß–ï–†–ï–ó –ú–ù–û–ñ–ï–°–¢–í–ï–ù–ù–´–ï API ---
async function checkTwitterMultipleAPIs(username) {
    if (!process.env.RAPIDAPI_KEY) {
        console.log('‚ö†Ô∏è RapidAPI –∫–ª—é—á –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω');
        return false;
    }

    const apis = [
        {
            name: 'RapidAPI Twitter API v2',
            url: `https://twitter-api47.p.rapidapi.com/v2/user/by/username/${username}`,
            headers: {
                'X-RapidAPI-Key': '4c37bfb142msha60bba1788f9aebp1c756ejsn6d6b4f478307',
                'X-RapidAPI-Host': 'twitter-api47.p.rapidapi.com'
            }
        },
        {
            name: 'Twitter API v1',
            url: `https://twitter-api45.p.rapidapi.com/user.php?username=${username}`,
            headers: {
                'X-RapidAPI-Key': '4c37bfb142msha60bba1788f9aebp1c756ejsn6d6b4f478307',
                'X-RapidAPI-Host': 'twitter-api45.p.rapidapi.com'
            }
        }
    ];
    
    for (const api of apis) {
        try {
            console.log(`üîÑ –ü—Ä–æ–±—É–µ–º ${api.name} –¥–ª—è @${username}`);
            const response = await axios.get(api.url, {
                headers: api.headers,
                timeout: 8000
            });
            
            if (response.data && (response.data.username || response.data.data?.username)) {
                console.log(`‚úÖ @${username} –Ω–∞–π–¥–µ–Ω —á–µ—Ä–µ–∑ ${api.name}`);
                return true;
            }
        } catch (error) {
            console.log(`‚ö†Ô∏è ${api.name} –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω: ${error.response?.status || error.message}`);
        }
    }
    
    return false;
}

// --- –ú–ê–†–®–†–£–¢–´ API ---
app.get('/', (req, res) => {
    res.send('API Server is running!');
});

app.get('/api/users', async (req, res) => {
    try {
        const users = await User.find({});
        console.log(`–ü–æ–ª—É—á–µ–Ω–æ ${users.length} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏–∑ –ë–î.`);
        res.status(200).json(users);
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏–∑ MongoDB:', error);
        res.status(500).json({ message: '–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π.' });
    }
});

// –ó–∞–º–µ–Ω–∏—Ç–µ –≤–∞—à POST /api/users —ç–Ω–¥–ø–æ–∏–Ω—Ç –Ω–∞ —ç—Ç–æ—Ç:

app.post('/api/users', async (req, res) => {
    const { nickname, country, lat, lng, avatar, twitter_username, twitter_profile_url } = req.body;
    const ipAddress = req.realIP;

    console.log('–ü–æ–ª—É—á–µ–Ω—ã –¥–∞–Ω–Ω—ã–µ:', { nickname, country, twitter_username, ip: ipAddress });

    // –í–∞–ª–∏–¥–∞—Ü–∏—è –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã—Ö –ø–æ–ª–µ–π
    if (!nickname || !country || lat === undefined || lng === undefined) {
        console.warn('–û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è:', { nickname, country, lat, lng });
        return res.status(400).json({ message: '–û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è (–Ω–∏–∫–Ω–µ–π–º, —Å—Ç—Ä–∞–Ω–∞ –∏–ª–∏ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã).' });
    }

    // –ü—Ä–æ–≤–µ—Ä–∫–∞ Twitter username
    if (!twitter_username || twitter_username.trim() === '') {
        return res.status(400).json({ message: 'Twitter username –æ–±—è–∑–∞—Ç–µ–ª–µ–Ω –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏.' });
    }


        // 2. –ü—Ä–æ–≤–µ—Ä–∫–∞ —É–Ω–∏–∫–∞–ª—å–Ω–æ—Å—Ç–∏ –ø–æ IP (–ò–°–ü–†–ê–í–õ–ï–ù–ù–ê–Ø)
        const ipUnique = await checkIPUniqueness(ipAddress, User);
        if (!ipUnique) {
            return res.status(403).json({ 
                message: '–° —ç—Ç–æ–≥–æ IP-–∞–¥—Ä–µ—Å–∞ —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω –∞–∫–∫–∞—É–Ω—Ç. –†–∞–∑—Ä–µ—à–µ–Ω —Ç–æ–ª—å–∫–æ –æ–¥–∏–Ω –∞–∫–∫–∞—É–Ω—Ç –Ω–∞ IP-–∞–¥—Ä–µ—Å.' 
            });
        }

        // 3. –ü—Ä–æ–≤–µ—Ä–∫–∞ —É–Ω–∏–∫–∞–ª—å–Ω–æ—Å—Ç–∏ nickname –∏ twitter_username
        const existingUserByNickname = await User.findOne({ nickname });
        if (existingUserByNickname) {
            return res.status(409).json({ message: '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å —Ç–∞–∫–∏–º –Ω–∏–∫–Ω–µ–π–º–æ–º —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç.' });
        }

        const cleanTwitterUsername = twitter_username.replace(/^@/, '');
        const existingUserByTwitter = await User.findOne({ twitter_username: cleanTwitterUsername });
        if (existingUserByTwitter) {
            return res.status(409).json({ message: '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å —Ç–∞–∫–∏–º Twitter –∞–∫–∫–∞—É–Ω—Ç–æ–º —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω.' });
        }

        // 4. –°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        const newUser = new User({
            nickname,
            country,
            lat,
            lng,
            avatar,
            twitter_username: cleanTwitterUsername,
            twitter_profile_url: twitter_profile_url || `https://twitter.com/${cleanTwitterUsername}`,
            ip_address: ipAddress
        });

        await newUser.save();
        console.log(`‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${nickname} (@${cleanTwitterUsername}) –∏–∑ ${country} —É—Å–ø–µ—à–Ω–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω! IP: ${ipAddress}`);
        
        res.status(201).json({
            message: '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É—Å–ø–µ—à–Ω–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω!',
            user: {
                nickname: newUser.nickname,
                country: newUser.country,
                twitter_username: newUser.twitter_username,
                twitter_profile_url: newUser.twitter_profile_url
            }
        });
    }
});

// –¢–∞–∫–∂–µ –¥–æ–±–∞–≤—å—Ç–µ –≤—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—É—é —Ñ—É–Ω–∫—Ü–∏—é –ø—Ä–æ–≤–µ—Ä–∫–∏ IP:
async function checkIPUniqueness(currentIP, User) {
    console.log(`üîç –ü—Ä–æ–≤–µ—Ä—è–µ–º —É–Ω–∏–∫–∞–ª—å–Ω–æ—Å—Ç—å IP: ${currentIP}`);
    
    try {
        // –¢–û–ß–ù–û–ï —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ IP-–∞–¥—Ä–µ—Å–∞
        const existingUserByIP = await User.findOne({ 
            ip_address: currentIP
        });
        
        if (existingUserByIP) {
            console.warn(`‚ùå IP ${currentIP} —É–∂–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º: ${existingUserByIP.nickname} (@${existingUserByIP.twitter_username})`);
            return false;
        }
        
        console.log(`‚úÖ IP ${currentIP} —Å–≤–æ–±–æ–¥–µ–Ω`);
        return true;
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ IP:', error);
        return true; // –í —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏ —Ä–∞–∑—Ä–µ—à–∞–µ–º —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é
    }
}

app.post('/api/check-twitter', async (req, res) => {
    const { username } = req.body;
    
    if (!username) {
        return res.status(400).json({ message: 'Twitter username –Ω–µ —É–∫–∞–∑–∞–Ω.' });
    }
    
    try {
        const exists = await checkTwitterUsername(username);
        res.json({ exists, username: username.replace(/^@/, '') });
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ Twitter:', error);
        res.status(500).json({ message: '–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ Twitter –∞–∫–∫–∞—É–Ω—Ç–∞.' });
    }
});

// --- –ó–ê–ü–£–°–ö –°–ï–†–í–ï–†–ê ---
app.listen(port, () => {
    console.log(`–°–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω –Ω–∞ –ø–æ—Ä—Ç—É ${port}`);
});
