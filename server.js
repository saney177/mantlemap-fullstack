require('dotenv').config(); // –ó–∞–≥—Ä—É–∂–∞–µ—Ç –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è –∏–∑ .env —Ñ–∞–π–ª–∞
const express = require('express');
const axios = require('axios'); // –î–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —é–∑–µ—Ä–Ω–µ–π–º–∞ –≤ Twitter
const cors = require('cors'); // –î–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è CORS
const mongoose = require('mongoose'); // –î–ª—è —Ä–∞–±–æ—Ç—ã —Å MongoDB

const app = express();
const port = process.env.PORT || 3000;

// --- –ü–û–î–ö–õ–Æ–ß–ï–ù–ò–ï –ö MONGODB ---
mongoose.connect(process.env.MONGODB_URI || '–í–ê–®_–ü–£–¢–¨_–ö_MONGODB')
  .then(() => console.log('–ü–æ–¥–∫–ª—é—á–µ–Ω–æ –∫ MongoDB!'))
  .catch(err => console.error('–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ MongoDB:', err));

// --- –û–ü–†–ï–î–ï–õ–ï–ù–ò–ï –°–•–ï–ú–´ –ò –ú–û–î–ï–õ–ò MONGODB ---
const userSchema = new mongoose.Schema({
    nickname: { type: String, required: true, unique: true },
    country: { type: String, required: true },
    lat: { type: Number, required: true },
    lng: { type: Number, required: true },
    avatar: { type: String },
    twitter_username: { type: String, unique: true, sparse: true },
    twitter_profile_url: { type: String },
    ip_address: { type: String } // –î–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è IP-–∞–¥—Ä–µ—Å–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
}, { timestamps: true });

const User = mongoose.model('User', userSchema);

// --- MIDDLEWARE ---
// Middleware –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ JSON-–∑–∞–ø—Ä–æ—Å–æ–≤
app.use(express.json());
app.use(express.urlencoded({ extended: true }));

// Middleware –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ä–µ–∞–ª—å–Ω–æ–≥–æ IP-–∞–¥—Ä–µ—Å–∞ (—É—á–∏—Ç—ã–≤–∞–µ—Ç –ø—Ä–æ–∫—Å–∏)
app.use((req, res, next) => {
    req.realIP = req.headers['x-forwarded-for']?.split(',')[0] || 
                 req.headers['x-real-ip'] || 
                 req.connection.remoteAddress || 
                 req.socket.remoteAddress || 
                 req.ip;
    next();
});

// –ù–∞—Å—Ç—Ä–æ–π–∫–∞ CORS
app.use(cors({
    origin: ['https://mantlemap.xyz', 'http://localhost:8080'], // –†–∞–∑—Ä–µ—à–µ–Ω–Ω—ã–µ –¥–æ–º–µ–Ω—ã
    methods: ['GET', 'POST'],
    allowedHeaders: ['Content-Type']
}));

// --- –§–£–ù–ö–¶–ò–Ø –î–õ–Ø –ü–†–û–í–ï–†–ö–ò –Æ–ó–ï–†–ù–ï–ô–ú–ê –í TWITTER ---
async function checkTwitterUsername(username) {
    if (!username || username.trim() === '') {
        return false;
    }

    // –£–±–∏—Ä–∞–µ–º @ –µ—Å–ª–∏ –µ—Å—Ç—å –≤ –Ω–∞—á–∞–ª–µ
    const cleanUsername = username.replace(/^@/, '');
    
    console.log(`üîç –ü—Ä–æ–≤–µ—Ä—è–µ–º Twitter –∞–∫–∫–∞—É–Ω—Ç: @${cleanUsername}`);
    
    // –í–ê–†–ò–ê–ù–¢ 1: –ò—Å–ø–æ–ª—å–∑—É–µ–º RapidAPI Twitter API (–±–µ—Å–ø–ª–∞—Ç–Ω—ã–π –ø–ª–∞–Ω)
    try {
        const response = await axios.get(`https://twitter-api45.p.rapidapi.com/user.php`, {
            params: { username: cleanUsername },
            headers: {
                'X-RapidAPI-Key': process.env.RAPIDAPI_KEY || 'YOUR_RAPIDAPI_KEY_HERE',
                'X-RapidAPI-Host': 'twitter-api45.p.rapidapi.com'
            },
            timeout: 10000
        });
        
        if (response.data && response.data.username) {
            console.log(`‚úÖ Twitter –∞–∫–∫–∞—É–Ω—Ç @${cleanUsername} –Ω–∞–π–¥–µ–Ω —á–µ—Ä–µ–∑ RapidAPI`);
            return true;
        }
    } catch (error) {
        console.log(`‚ö†Ô∏è RapidAPI –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω –¥–ª—è @${cleanUsername}: ${error.response?.status || error.message}`);
    }
    
    // –í–ê–†–ò–ê–ù–¢ 2: –í—Ä–µ–º–µ–Ω–Ω–æ –∏—Å–ø–æ–ª—å–∑—É–µ–º —Å–ø–∏—Å–æ–∫ –∏–∑–≤–µ—Å—Ç–Ω—ã—Ö Twitter –∞–∫–∫–∞—É–Ω—Ç–æ–≤
    return await checkTwitterUsernameWhitelist(cleanUsername);
}

// --- –ü–†–û–í–ï–†–ö–ê –ß–ï–†–ï–ó WHITELIST –ò –°–¢–†–û–ì–ò–ï –ü–†–ê–í–ò–õ–ê ---
async function checkTwitterUsernameWhitelist(username) {
    // –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞ —è–≤–Ω–æ –ø–æ–¥–¥–µ–ª—å–Ω—ã–µ –ø–∞—Ç—Ç–µ—Ä–Ω—ã (–°–¢–†–û–ì–ê–Ø –ü–†–û–í–ï–†–ö–ê)
    const spamPatterns = [
        /^[a-z]{10,}$/, // —Ç–æ–ª—å–∫–æ —Å—Ç—Ä–æ—á–Ω—ã–µ –±—É–∫–≤—ã 10+ —Å–∏–º–≤–æ–ª–æ–≤ –±–µ–∑ —Ü–∏—Ñ—Ä/–ø–æ–¥—á–µ—Ä–∫–∏–≤–∞–Ω–∏–π
        /^[qwerty]{8,}/, // –∫–ª–∞–≤–∏–∞—Ç—É—Ä–Ω—ã–π –Ω–∞–±–æ—Ä
        /^[asdfgh]{8,}/, // –∫–ª–∞–≤–∏–∞—Ç—É—Ä–Ω—ã–π –Ω–∞–±–æ—Ä
        /^(.)\1{5,}$/, // –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏–µ —Å–∏–º–≤–æ–ª–∞ 5+ —Ä–∞–∑
        /^[xyz]{8,}$/, // –º–Ω–æ–≥–æ xyz
        /^test[0-9]*$/, // test + —Ü–∏—Ñ—Ä—ã
        /^user[0-9]*$/, // user + —Ü–∏—Ñ—Ä—ã
        /^[0-9]{8,}$/, // —Ç–æ–ª—å–∫–æ —Ü–∏—Ñ—Ä—ã 8+ —Å–∏–º–≤–æ–ª–æ–≤
        /hjk|jkl|dfg|fgh|cvb|bnm/, // —Å–ª—É—á–∞–π–Ω—ã–µ –∫–ª–∞–≤–∏–∞—Ç—É—Ä–Ω—ã–µ –∫–æ–º–±–∏–Ω–∞—Ü–∏–∏
        /^[bcdfghjklmnpqrstvwxyz]{12,}$/, // –º–Ω–æ–≥–æ —Å–æ–≥–ª–∞—Å–Ω—ã—Ö –ø–æ–¥—Ä—è–¥
    ];
    
    for (const pattern of spamPatterns) {
        if (pattern.test(username.toLowerCase())) {
            console.log(`‚ùå @${username} –æ—Ç–∫–ª–æ–Ω–µ–Ω –∫–∞–∫ —Å–ø–∞–º –ø–æ –ø–∞—Ç—Ç–µ—Ä–Ω—É: ${pattern}`);
            return false;
        }
    }
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º whitelist –ø–æ–ø—É–ª—è—Ä–Ω—ã—Ö/–∏–∑–≤–µ—Å—Ç–Ω—ã—Ö –∞–∫–∫–∞—É–Ω—Ç–æ–≤
    const knownAccounts = [
        // –ü–æ–ø—É–ª—è—Ä–Ω—ã–µ –∫—Ä–∏–ø—Ç–æ –∞–∫–∫–∞—É–Ω—Ç—ã
        'elonmusk', 'bitcoin', 'ethereum', 'binance', 'coinbase', 'vitalikbuterin',
        'satoshin', 'cz_binance', 'justinsuntron', 'whale_alert', 'defi_pulse',
        
        // –ü–æ–ø—É–ª—è—Ä–Ω—ã–µ –∏–º–µ–Ω–∞ —Å –∫—Ä–∏–ø—Ç–æ —Å—É—Ñ—Ñ–∏–∫—Å–∞–º–∏
        /^[a-z]{2,8}_?(eth|btc|crypto|nft|defi|web3|doge|sol|ada|dot|bnb)$/,
        /^(crypto|bitcoin|eth|nft|defi|web3)_?[a-z0-9]{2,8}$/,
        
        // –†–µ–∞–ª—å–Ω—ã–µ –ø–∞—Ç—Ç–µ—Ä–Ω—ã –∏–º–µ–Ω
        /^[a-z]{3,8}[0-9]{1,4}$/, // –∏–º—è + 1-4 —Ü–∏—Ñ—Ä—ã (john123)
        /^[a-z]{2,8}_[a-z]{2,8}$/, // –∏–º—è_—Ñ–∞–º–∏–ª–∏—è
        /^real[a-z]{3,10}$/, // real + –∏–º—è
        /^[a-z]{3,8}(official|real|the)$/, // –∏–º—è + official/real/the
        
        // –ü–æ–ø—É–ª—è—Ä–Ω—ã–µ —Å—É—Ñ—Ñ–∏–∫—Å—ã/–ø—Ä–µ—Ñ–∏–∫—Å—ã
        /^(mr|ms|dr|prof)[a-z]{3,10}$/, // mr/ms/dr + –∏–º—è
        /^[a-z]{3,8}(jr|sr|ii|iii)$/, // –∏–º—è + jr/sr/ii/iii
    ];
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º whitelist
    for (const account of knownAccounts) {
        if (typeof account === 'string') {
            if (username.toLowerCase() === account.toLowerCase()) {
                console.log(`‚úÖ @${username} –Ω–∞–π–¥–µ–Ω –≤ whitelist –∏–∑–≤–µ—Å—Ç–Ω—ã—Ö –∞–∫–∫–∞—É–Ω—Ç–æ–≤`);
                return true;
            }
        } else if (account instanceof RegExp) {
            if (account.test(username.toLowerCase())) {
                console.log(`‚úÖ @${username} –ø—Ä–∏–Ω—è—Ç –ø–æ –ø–∞—Ç—Ç–µ—Ä–Ω—É whitelist: ${account}`);
                return true;
            }
        }
    }
    
    // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞: –µ—Å–ª–∏ –∏–º—è —Å–æ–¥–µ—Ä–∂–∏—Ç —Ä–∞—Å–ø—Ä–æ—Å—Ç—Ä–∞–Ω–µ–Ω–Ω—ã–µ —Å–ª–æ–≤–∞
    const commonWords = ['john', 'mike', 'alex', 'david', 'chris', 'anna', 'maria', 'lisa', 
                        'crypto', 'bitcoin', 'eth', 'trader', 'investor', 'dev', 'tech'];
    
    const hasCommonWord = commonWords.some(word => 
        username.toLowerCase().includes(word) && 
        username.length <= 15 && 
        !spamPatterns.some(pattern => pattern.test(username.toLowerCase()))
    );
    
    if (hasCommonWord) {
        console.log(`‚úÖ @${username} –ø—Ä–∏–Ω—è—Ç - —Å–æ–¥–µ—Ä–∂–∏—Ç —Ä–∞—Å–ø—Ä–æ—Å—Ç—Ä–∞–Ω–µ–Ω–Ω–æ–µ —Å–ª–æ–≤–æ`);
        return true;
    }
    
    // –ï—Å–ª–∏ –Ω–∏—á–µ–≥–æ –Ω–µ –ø–æ–¥–æ—à–ª–æ - –æ—Ç–∫–ª–æ–Ω—è–µ–º
    console.log(`‚ùå @${username} –æ—Ç–∫–ª–æ–Ω–µ–Ω - –Ω–µ –ø—Ä–æ—à–µ–ª whitelist –∏ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–∞—Ç—Ç–µ—Ä–Ω–æ–≤`);
    return false;
}

// --- –ú–ê–†–®–†–£–¢–´ API ---

// –ü—Ä–æ—Å—Ç–æ–π –º–∞—Ä—à—Ä—É—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ä–∞–±–æ—Ç—ã —Å–µ—Ä–≤–µ—Ä–∞
app.get('/', (req, res) => {
    res.send('API Server is running!');
});

// –ú–∞—Ä—à—Ä—É—Ç –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏–∑ MongoDB
app.get('/api/users', async (req, res) => {
    try {
        const users = await User.find({});
        console.log(`–ü–æ–ª—É—á–µ–Ω–æ ${users.length} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏–∑ –ë–î.`);
        res.status(200).json(users);
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏–∑ MongoDB:', error);
        res.status(500).json({ message: '–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π.' });
    }
});

// –ú–∞—Ä—à—Ä—É—Ç –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
app.post('/api/users', async (req, res) => {
    const { nickname, country, lat, lng, avatar, twitter_username, twitter_profile_url } = req.body;
    const ipAddress = req.realIP; // –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ä–µ–∞–ª—å–Ω—ã–π IP-–∞–¥—Ä–µ—Å

    console.log('–ü–æ–ª—É—á–µ–Ω—ã –¥–∞–Ω–Ω—ã–µ:', { nickname, country, twitter_username, ip: ipAddress });

    // 1. –í–∞–ª–∏–¥–∞—Ü–∏—è –Ω–∞ —Å—Ç–æ—Ä–æ–Ω–µ —Å–µ—Ä–≤–µ—Ä–∞: –ø—Ä–æ–≤–µ—Ä–∫–∞ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã—Ö –ø–æ–ª–µ–π
    if (!nickname || !country || lat === undefined || lng === undefined) {
        console.warn('–û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è:', { nickname, country, lat, lng });
        return res.status(400).json({ message: '–û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è (–Ω–∏–∫–Ω–µ–π–º, —Å—Ç—Ä–∞–Ω–∞ –∏–ª–∏ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã).' });
    }

    // 2. –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ–≥–æ Twitter username
    if (!twitter_username || twitter_username.trim() === '') {
        return res.status(400).json({ message: 'Twitter username –æ–±—è–∑–∞—Ç–µ–ª–µ–Ω –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏.' });
    }

    try {
        // 3. –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏—è Twitter –∞–∫–∫–∞—É–Ω—Ç–∞
        console.log(`–ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ Twitter –∞–∫–∫–∞—É–Ω—Ç–∞: @${twitter_username}`);
        const twitterExists = await checkTwitterUsername(twitter_username);
        
        if (!twitterExists) {
            return res.status(400).json({ 
                message: '–£–∫–∞–∑–∞–Ω–Ω—ã–π Twitter –∞–∫–∫–∞—É–Ω—Ç –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç. –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π Twitter.' 
            });
        }

        // 4. –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ —É–Ω–∏–∫–∞–ª—å–Ω–æ—Å—Ç—å –ø–æ IP-–∞–¥—Ä–µ—Å—É (–∏—Å–∫–ª—é—á–∞–µ–º —Å—Ç–∞—Ä—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å ip_address: null)
        const existingUserByIP = await User.findOne({ 
            ip_address: ipAddress,
            ip_address: { $ne: null } // –ò—Å–∫–ª—é—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å null IP
        });
        
        if (existingUserByIP) {
            console.warn(`–ü–æ–ø—ã—Ç–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ —Å —É–∂–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–Ω–æ–≥–æ IP: ${ipAddress}`);
            return res.status(403).json({ 
                message: '–° —ç—Ç–æ–≥–æ IP-–∞–¥—Ä–µ—Å–∞ —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω –∞–∫–∫–∞—É–Ω—Ç. –†–∞–∑—Ä–µ—à–µ–Ω —Ç–æ–ª—å–∫–æ –æ–¥–∏–Ω –∞–∫–∫–∞—É–Ω—Ç –Ω–∞ IP-–∞–¥—Ä–µ—Å.' 
            });
        }

        // 5. –°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        const newUser = new User({
            nickname,
            country,
            lat,
            lng,
            avatar,
            twitter_username: twitter_username.replace(/^@/, ''), // –£–±–∏—Ä–∞–µ–º @ –µ—Å–ª–∏ –µ—Å—Ç—å
            twitter_profile_url: twitter_profile_url || `https://twitter.com/${twitter_username.replace(/^@/, '')}`,
            ip_address: ipAddress // –°–æ—Ö—Ä–∞–Ω—è–µ–º IP-–∞–¥—Ä–µ—Å
        });

        await newUser.save();
        console.log(`–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${nickname} (@${twitter_username}) –∏–∑ ${country} —É—Å–ø–µ—à–Ω–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω!`);
        
        res.status(201).json({
            message: '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É—Å–ø–µ—à–Ω–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω!',
            user: newUser
        });

    } catch (error) {
        if (error.code === 11000) {
            console.warn('–ü–æ–ø—ã—Ç–∫–∞ –¥—É–±–ª–∏–∫–∞—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', error.message);
            
            // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∫–∞–∫–æ–µ –ø–æ–ª–µ –≤—ã–∑–≤–∞–ª–æ –¥—É–±–ª–∏–∫–∞—Ç
            if (error.message.includes('nickname')) {
                return res.status(409).json({ message: '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å —Ç–∞–∫–∏–º –Ω–∏–∫–Ω–µ–π–º–æ–º —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç.' });
            } else if (error.message.includes('twitter_username')) {
                return res.status(409).json({ message: '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å —Ç–∞–∫–∏–º Twitter –∞–∫–∫–∞—É–Ω—Ç–æ–º —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω.' });
            } else {
                return res.status(409).json({ message: '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å —Ç–∞–∫–∏–º–∏ –¥–∞–Ω–Ω—ã–º–∏ —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç.' });
            }
        }
        
        console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –≤ –ë–î:', error.message);
        return res.status(500).json({ 
            message: '–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞ –ø—Ä–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.',
            details: error.message 
        });
    }
});

// –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–π –º–∞—Ä—à—Ä—É—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ Twitter –∞–∫–∫–∞—É–Ω—Ç–∞ (–º–æ–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –Ω–∞ —Ñ—Ä–æ–Ω—Ç–µ–Ω–¥–µ)
app.post('/api/check-twitter', async (req, res) => {
    const { username } = req.body;
    
    if (!username) {
        return res.status(400).json({ message: 'Twitter username –Ω–µ —É–∫–∞–∑–∞–Ω.' });
    }
    
    try {
        const exists = await checkTwitterUsername(username);
        res.json({ exists, username: username.replace(/^@/, '') });
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ Twitter:', error);
        res.status(500).json({ message: '–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ Twitter –∞–∫–∫–∞—É–Ω—Ç–∞.' });
    }
});

// --- –ó–ê–ü–£–°–ö –°–ï–†–í–ï–†–ê ---
app.listen(port, () => {
    console.log(`–°–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω –Ω–∞ –ø–æ—Ä—Ç—É ${port}`);
});
