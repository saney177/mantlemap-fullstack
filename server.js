require('dotenv').config(); // –ó–∞–≥—Ä—É–∂–∞–µ—Ç –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è –∏–∑ .env —Ñ–∞–π–ª–∞
const express = require('express');
const axios = require('axios'); // –î–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —é–∑–µ—Ä–Ω–µ–π–º–∞ –≤ Twitter
const cors = require('cors'); // –î–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è CORS
const mongoose = require('mongoose'); // –î–ª—è —Ä–∞–±–æ—Ç—ã —Å MongoDB

const app = express();
const port = process.env.PORT || 3000;

// --- –ü–û–î–ö–õ–Æ–ß–ï–ù–ò–ï –ö MONGODB ---
mongoose.connect(process.env.MONGODB_URI || '–í–ê–®_–ü–£–¢–¨_–ö_MONGODB')
  .then(() => console.log('–ü–æ–¥–∫–ª—é—á–µ–Ω–æ –∫ MongoDB!'))
  .catch(err => console.error('–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ MongoDB:', err));

// --- –û–ü–†–ï–î–ï–õ–ï–ù–ò–ï –°–•–ï–ú–´ –ò –ú–û–î–ï–õ–ò MONGODB ---
const userSchema = new mongoose.Schema({
    nickname: { type: String, required: true, unique: true },
    country: { type: String, required: true },
    lat: { type: Number, required: true },
    lng: { type: Number, required: true },
    avatar: { type: String },
    twitter_username: { type: String, unique: true, sparse: true },
    twitter_profile_url: { type: String },
    ip_address: { type: String } // –î–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è IP-–∞–¥—Ä–µ—Å–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
}, { timestamps: true });

const User = mongoose.model('User', userSchema);

// --- MIDDLEWARE ---
// Middleware –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ JSON-–∑–∞–ø—Ä–æ—Å–æ–≤
app.use(express.json());
app.use(express.urlencoded({ extended: true }));

// Middleware –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ä–µ–∞–ª—å–Ω–æ–≥–æ IP-–∞–¥—Ä–µ—Å–∞ (—É—á–∏—Ç—ã–≤–∞–µ—Ç –ø—Ä–æ–∫—Å–∏)
app.use((req, res, next) => {
    req.realIP = req.headers['x-forwarded-for']?.split(',')[0] || 
                 req.headers['x-real-ip'] || 
                 req.connection.remoteAddress || 
                 req.socket.remoteAddress || 
                 req.ip;
    next();
});

// –ù–∞—Å—Ç—Ä–æ–π–∫–∞ CORS
app.use(cors({
    origin: ['https://mantlemap.xyz', 'http://localhost:8080'], // –†–∞–∑—Ä–µ—à–µ–Ω–Ω—ã–µ –¥–æ–º–µ–Ω—ã
    methods: ['GET', 'POST'],
    allowedHeaders: ['Content-Type']
}));

// --- –§–£–ù–ö–¶–ò–Ø –î–õ–Ø –ü–†–û–í–ï–†–ö–ò –Æ–ó–ï–†–ù–ï–ô–ú–ê –í TWITTER ---
// --- –§–£–ù–ö–¶–ò–Ø –î–õ–Ø –ü–†–û–í–ï–†–ö–ò –Æ–ó–ï–†–ù–ï–ô–ú–ê –í TWITTER ---
async function checkTwitterUsername(username) {
    if (!username || username.trim() === '') {
        return false;
    }

    // –£–±–∏—Ä–∞–µ–º @ –µ—Å–ª–∏ –µ—Å—Ç—å –≤ –Ω–∞—á–∞–ª–µ
    const cleanUsername = username.replace(/^@/, '');
    
    console.log(`üîç –ü—Ä–æ–≤–µ—Ä—è–µ–º Twitter –∞–∫–∫–∞—É–Ω—Ç: @${cleanUsername}`);
    
    // –í–ê–†–ò–ê–ù–¢ 1: RapidAPI Twitter API
    if (process.env.RAPIDAPI_KEY && process.env.RAPIDAPI_KEY !== '4c37bfb142msha60bba1788f9aebp1c756ejsn6d6b4f478307') {
        try {
            const response = await axios.get(`https://twitter-api45.p.rapidapi.com/user.php`, {
                params: { username: cleanUsername },
                headers: {
                    'X-RapidAPI-Key': process.env.RAPIDAPI_KEY,
                    'X-RapidAPI-Host': 'twitter-api45.p.rapidapi.com'
                },
                timeout: 10000
            });
            
            if (response.data && response.data.username) {
                console.log(`‚úÖ Twitter –∞–∫–∫–∞—É–Ω—Ç @${cleanUsername} –Ω–∞–π–¥–µ–Ω —á–µ—Ä–µ–∑ RapidAPI`);
                return true;
            }
        } catch (error) {
            console.log(`‚ö†Ô∏è RapidAPI –æ—à–∏–±–∫–∞ –¥–ª—è @${cleanUsername}:`, error.response?.status, error.response?.data?.message || error.message);
            
            // –ï—Å–ª–∏ –∫–≤–æ—Ç–∞ –∏—Å—á–µ—Ä–ø–∞–Ω–∞ –∏–ª–∏ –¥—Ä—É–≥–∞—è –æ—à–∏–±–∫–∞ API, –∏—Å–ø–æ–ª—å–∑—É–µ–º fallback
            if (error.response?.status === 403) {
                console.log('‚ö†Ô∏è –ü—Ä–æ–±–ª–µ–º–∞ —Å RapidAPI –∫–ª—é—á–æ–º - –∏—Å–ø–æ–ª—å–∑—É–µ–º fallback –ø—Ä–æ–≤–µ—Ä–∫—É');
            }
        }
    } else {
        console.log('‚ö†Ô∏è RapidAPI –∫–ª—é—á –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω - –∏—Å–ø–æ–ª—å–∑—É–µ–º fallback –ø—Ä–æ–≤–µ—Ä–∫—É');
    }
    
    // –í–ê–†–ò–ê–ù–¢ 2: –ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —á–µ—Ä–µ–∑ –¥—Ä—É–≥–æ–π API
    try {
        // –ò—Å–ø–æ–ª—å–∑—É–µ–º –¥—Ä—É–≥–æ–π –±–µ—Å–ø–ª–∞—Ç–Ω—ã–π API –∏–ª–∏ –º–µ—Ç–æ–¥
        const publicResponse = await axios.get(`https://nitter.net/${cleanUsername}`, {
            timeout: 5000,
            validateStatus: function (status) {
                return status < 500; // –ü—Ä–∏–Ω–∏–º–∞–µ–º —Å—Ç–∞—Ç—É—Å—ã < 500
            }
        });
        
        // –ï—Å–ª–∏ —Å—Ç—Ä–∞–Ω–∏—Ü–∞ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç (–Ω–µ 404), –∑–Ω–∞—á–∏—Ç –∞–∫–∫–∞—É–Ω—Ç —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
        if (publicResponse.status === 200) {
            console.log(`‚úÖ Twitter –∞–∫–∫–∞—É–Ω—Ç @${cleanUsername} –Ω–∞–π–¥–µ–Ω —á–µ—Ä–µ–∑ Nitter`);
            return true;
        }
    } catch (error) {
        console.log(`‚ö†Ô∏è Nitter –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω –¥–ª—è @${cleanUsername}: ${error.message}`);
    }
    
    // –í–ê–†–ò–ê–ù–¢ 3: –ü—Ä–æ–≤–µ—Ä–∫–∞ —á–µ—Ä–µ–∑ –ø—É–±–ª–∏—á–Ω—ã–π Twitter URL
    try {
        const twitterResponse = await axios.get(`https://twitter.com/${cleanUsername}`, {
            timeout: 5000,
            validateStatus: function (status) {
                return status < 500;
            },
            headers: {
                'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36'
            }
        });
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Å—Ç—Ä–∞–Ω–∏—Ü–∞ –Ω–µ –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç "This account doesn't exist"
        if (twitterResponse.status === 200 && 
            !twitterResponse.data.includes('This account doesn\'t exist') &&
            !twitterResponse.data.includes('Account suspended')) {
            console.log(`‚úÖ Twitter –∞–∫–∫–∞—É–Ω—Ç @${cleanUsername} –Ω–∞–π–¥–µ–Ω —á–µ—Ä–µ–∑ –ø—Ä—è–º—É—é –ø—Ä–æ–≤–µ—Ä–∫—É`);
            return true;
        }
    } catch (error) {
        console.log(`‚ö†Ô∏è –ü—Ä—è–º–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ Twitter –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞ –¥–ª—è @${cleanUsername}: ${error.message}`);
    }
    
    // –í–ê–†–ò–ê–ù–¢ 4: –£–ª—É—á—à–µ–Ω–Ω–∞—è whitelist –ø—Ä–æ–≤–µ—Ä–∫–∞ –∫–∞–∫ –ø–æ—Å–ª–µ–¥–Ω–∏–π —Ä–µ–∑–µ—Ä–≤
    return await checkTwitterUsernameWhitelist(cleanUsername);
}

// --- –£–õ–£–ß–®–ï–ù–ù–ê–Ø –ü–†–û–í–ï–†–ö–ê –ß–ï–†–ï–ó WHITELIST ---
async function checkTwitterUsernameWhitelist(username) {
    console.log(`üîç –ó–∞–ø—É—Å–∫ whitelist –ø—Ä–æ–≤–µ—Ä–∫–∏ –¥–ª—è @${username}`);
    
    // 1. –Ø–≤–Ω–æ –ø–æ–¥–¥–µ–ª—å–Ω—ã–µ –ø–∞—Ç—Ç–µ—Ä–Ω—ã (–±–æ–ª–µ–µ —Ç–æ—á–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞)
    const obviousSpamPatterns = [
        /^[a-z]{15,}$/, // —Ç–æ–ª—å–∫–æ —Å—Ç—Ä–æ—á–Ω—ã–µ –±—É–∫–≤—ã 15+ —Å–∏–º–≤–æ–ª–æ–≤ (—Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–æ)
        /^(.)\1{6,}$/, // –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏–µ –æ–¥–Ω–æ–≥–æ —Å–∏–º–≤–æ–ª–∞ 6+ —Ä–∞–∑ (aaaaaaa)
        /^[qwertyuiop]{8,}$/i, // –∫–ª–∞–≤–∏–∞—Ç—É—Ä–Ω—ã–π –Ω–∞–±–æ—Ä
        /^[asdfghjkl]{8,}$/i, // –∫–ª–∞–≤–∏–∞—Ç—É—Ä–Ω—ã–π –Ω–∞–±–æ—Ä
        /^[zxcvbnm]{8,}$/i, // –∫–ª–∞–≤–∏–∞—Ç—É—Ä–Ω—ã–π –Ω–∞–±–æ—Ä
        /^test[0-9]{3,}$/i, // test123456
        /^user[0-9]{3,}$/i, // user123456
        /^[0-9]{10,}$/, // —Ç–æ–ª—å–∫–æ —Ü–∏—Ñ—Ä—ã 10+ —Å–∏–º–≤–æ–ª–æ–≤
        /^[bcdfghjklmnpqrstvwxyz]{15,}$/i, // –º–Ω–æ–≥–æ —Å–æ–≥–ª–∞—Å–Ω—ã—Ö –±–µ–∑ –≥–ª–∞—Å–Ω—ã—Ö
        /hjklfdsapoiuytrewq|mnbvcxzasdfgh/, // —Å–ª—É—á–∞–π–Ω—ã–π –Ω–∞–±–æ—Ä –±—É–∫–≤
    ];
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞ –æ—á–µ–≤–∏–¥–Ω—ã–π —Å–ø–∞–º
    for (const pattern of obviousSpamPatterns) {
        if (pattern.test(username)) {
            console.log(`‚ùå @${username} –æ—Ç–∫–ª–æ–Ω–µ–Ω –∫–∞–∫ –æ—á–µ–≤–∏–¥–Ω—ã–π —Å–ø–∞–º: ${pattern}`);
            return false;
        }
    }
    
    // 2. –ü–æ–∑–∏—Ç–∏–≤–Ω—ã–µ –ø–∞—Ç—Ç–µ—Ä–Ω—ã (—á—Ç–æ –ü–†–ò–ù–ò–ú–ê–ï–ú)
    const validPatterns = [
        // Crypto-related –∏–º–µ–Ω–∞ (–æ—á–µ–Ω—å –ø–æ–ø—É–ª—è—Ä–Ω—ã –≤ Twitter)
        /^0x[a-zA-Z][a-zA-Z0-9]{3,12}$/i, // 0x + –±—É–∫–≤—ã/—Ü–∏—Ñ—Ä—ã (–∫–∞–∫ 0xAndrewMoh)
        /^[a-zA-Z]{2,8}(eth|btc|crypto|nft|defi|web3|sol|ada|dot|bnb)$/i,
        /^(crypto|bitcoin|eth|nft|defi|web3)[a-zA-Z0-9_]{2,10}$/i,
        
        // –û–±—ã—á–Ω—ã–µ –∏–º–µ–Ω–∞ —Å —Ü–∏—Ñ—Ä–∞–º–∏
        /^[a-zA-Z]{3,12}[0-9]{1,4}$/i, // –∏–º—è + 1-4 —Ü–∏—Ñ—Ä—ã
        /^[a-zA-Z]{2,8}_[a-zA-Z]{2,8}$/i, // –∏–º—è_—Ñ–∞–º–∏–ª–∏—è
        /^[a-zA-Z]{3,12}_?[0-9]{1,3}$/i, // –∏–º—è_123
        
        // –ò–º–µ–Ω–∞ —Å –ø—Ä–µ—Ñ–∏–∫—Å–∞–º–∏/—Å—É—Ñ—Ñ–∏–∫—Å–∞–º–∏
        /^(real|the|mr|ms|dr)[a-zA-Z]{3,12}$/i,
        /^[a-zA-Z]{3,12}(official|real|jr|sr)$/i,
        
        // –°–º–µ—à–∞–Ω–Ω—ã–µ –ø–∞—Ç—Ç–µ—Ä–Ω—ã
        /^[a-zA-Z][a-zA-Z0-9_]{4,14}[a-zA-Z0-9]$/i, // –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è –∏ –∑–∞–∫–∞–Ω—á–∏–≤–∞–µ—Ç—Å—è –±—É–∫–≤–æ–π/—Ü–∏—Ñ—Ä–æ–π
    ];
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–∑–∏—Ç–∏–≤–Ω—ã–µ –ø–∞—Ç—Ç–µ—Ä–Ω—ã
    for (const pattern of validPatterns) {
        if (pattern.test(username)) {
            console.log(`‚úÖ @${username} –ø—Ä–∏–Ω—è—Ç –ø–æ –≤–∞–ª–∏–¥–Ω–æ–º—É –ø–∞—Ç—Ç–µ—Ä–Ω—É: ${pattern}`);
            return true;
        }
    }
    
    // 3. –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –Ω–∞–ª–∏—á–∏–µ –æ—Å–º—ã—Å–ª–µ–Ω–Ω—ã—Ö —á–∞—Å—Ç–µ–π
    const meaningfulParts = [
        // –ü–æ–ø—É–ª—è—Ä–Ω—ã–µ –∏–º–µ–Ω–∞
        'alex', 'andrew', 'john', 'mike', 'david', 'chris', 'anna', 'maria', 'lisa', 'sarah',
        'crypto', 'bitcoin', 'eth', 'trader', 'investor', 'dev', 'tech', 'hodl', 'moon',
        // Crypto —Ç–µ—Ä–º–∏–Ω—ã
        'defi', 'nft', 'web3', 'doge', 'shib', 'ada', 'dot', 'sol', 'bnb', 'matic'
    ];
    
    const lowerUsername = username.toLowerCase();
    const hasMeaningfulPart = meaningfulParts.some(part => 
        lowerUsername.includes(part) && username.length >= 4 && username.length <= 15
    );
    
    if (hasMeaningfulPart) {
        console.log(`‚úÖ @${username} –ø—Ä–∏–Ω—è—Ç - —Å–æ–¥–µ—Ä–∂–∏—Ç –æ—Å–º—ã—Å–ª–µ–Ω–Ω—É—é —á–∞—Å—Ç—å`);
        return true;
    }
    
    // 4. –§–∏–Ω–∞–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞: –µ—Å–ª–∏ –∏–º—è –Ω–µ —Å–ª–∏—à–∫–æ–º —Å—Ç—Ä–∞–Ω–Ω–æ–µ
    const isSuspicious = 
        username.length > 15 || // —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–æ–µ
        username.length < 3 || // —Å–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–æ–µ
        /^[0-9]+$/.test(username) || // —Ç–æ–ª—å–∫–æ —Ü–∏—Ñ—Ä—ã
        !/[a-zA-Z]/.test(username); // –Ω–µ—Ç –±—É–∫–≤ –≤–æ–æ–±—â–µ
        
    if (!isSuspicious) {
        console.log(`‚úÖ @${username} –ø—Ä–∏–Ω—è—Ç - –Ω–µ –≤—ã–≥–ª—è–¥–∏—Ç –ø–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω–æ`);
        return true;
    }
    
    console.log(`‚ùå @${username} –æ—Ç–∫–ª–æ–Ω–µ–Ω - –Ω–µ –ø—Ä–æ—à–µ–ª –≤—Å–µ –ø—Ä–æ–≤–µ—Ä–∫–∏`);
    return false;
}

// --- –î–û–ü–û–õ–ù–ò–¢–ï–õ–¨–ù–ê–Ø –§–£–ù–ö–¶–ò–Ø –î–õ–Ø –ü–†–û–í–ï–†–ö–ò –ß–ï–†–ï–ó –ú–ù–û–ñ–ï–°–¢–í–ï–ù–ù–´–ï API ---
async function checkTwitterMultipleAPIs(username) {
    const apis = [
        {
            name: 'RapidAPI Twitter API v2',
            url: `https://twitter-api47.p.rapidapi.com/v2/user/by/username/${username}`,
            headers: {
                'X-RapidAPI-Key': process.env.RAPIDAPI_KEY,
                'X-RapidAPI-Host': 'twitter-api47.p.rapidapi.com'
            }
        },
        {
            name: 'Twitter API v1',
            url: `https://twitter-api45.p.rapidapi.com/user.php?username=${username}`,
            headers: {
                'X-RapidAPI-Key': process.env.RAPIDAPI_KEY,
                'X-RapidAPI-Host': 'twitter-api45.p.rapidapi.com'
            }
        }
    ];
    
    for (const api of apis) {
        try {
            console.log(`üîÑ –ü—Ä–æ–±—É–µ–º ${api.name} –¥–ª—è @${username}`);
            const response = await axios.get(api.url, {
                headers: api.headers,
                timeout: 8000
            });
            
            if (response.data && (response.data.username || response.data.data?.username)) {
                console.log(`‚úÖ @${username} –Ω–∞–π–¥–µ–Ω —á–µ—Ä–µ–∑ ${api.name}`);
                return true;
            }
        } catch (error) {
            console.log(`‚ö†Ô∏è ${api.name} –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω: ${error.response?.status || error.message}`);
        }
    }
    
    return false;
}
   

// --- –ú–ê–†–®–†–£–¢–´ API ---

// –ü—Ä–æ—Å—Ç–æ–π –º–∞—Ä—à—Ä—É—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ä–∞–±–æ—Ç—ã —Å–µ—Ä–≤–µ—Ä–∞
app.get('/', (req, res) => {
    res.send('API Server is running!');
});

// –ú–∞—Ä—à—Ä—É—Ç –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏–∑ MongoDB
app.get('/api/users', async (req, res) => {
    try {
        const users = await User.find({});
        console.log(`–ü–æ–ª—É—á–µ–Ω–æ ${users.length} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏–∑ –ë–î.`);
        res.status(200).json(users);
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏–∑ MongoDB:', error);
        res.status(500).json({ message: '–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π.' });
    }
});

// –ú–∞—Ä—à—Ä—É—Ç –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
app.post('/api/users', async (req, res) => {
    const { nickname, country, lat, lng, avatar, twitter_username, twitter_profile_url } = req.body;
    const ipAddress = req.realIP; // –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ä–µ–∞–ª—å–Ω—ã–π IP-–∞–¥—Ä–µ—Å

    console.log('–ü–æ–ª—É—á–µ–Ω—ã –¥–∞–Ω–Ω—ã–µ:', { nickname, country, twitter_username, ip: ipAddress });

    // 1. –í–∞–ª–∏–¥–∞—Ü–∏—è –Ω–∞ —Å—Ç–æ—Ä–æ–Ω–µ —Å–µ—Ä–≤–µ—Ä–∞: –ø—Ä–æ–≤–µ—Ä–∫–∞ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã—Ö –ø–æ–ª–µ–π
    if (!nickname || !country || lat === undefined || lng === undefined) {
        console.warn('–û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è:', { nickname, country, lat, lng });
        return res.status(400).json({ message: '–û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è (–Ω–∏–∫–Ω–µ–π–º, —Å—Ç—Ä–∞–Ω–∞ –∏–ª–∏ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã).' });
    }

    // 2. –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ–≥–æ Twitter username
    if (!twitter_username || twitter_username.trim() === '') {
        return res.status(400).json({ message: 'Twitter username –æ–±—è–∑–∞—Ç–µ–ª–µ–Ω –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏.' });
    }

    try {
        // 3. –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏—è Twitter –∞–∫–∫–∞—É–Ω—Ç–∞
        console.log(`–ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ Twitter –∞–∫–∫–∞—É–Ω—Ç–∞: @${twitter_username}`);
        const twitterExists = await checkTwitterUsername(twitter_username);
        
        if (!twitterExists) {
            return res.status(400).json({ 
                message: '–£–∫–∞–∑–∞–Ω–Ω—ã–π Twitter –∞–∫–∫–∞—É–Ω—Ç –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç. –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π Twitter.' 
            });
        }

        // 4. –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ —É–Ω–∏–∫–∞–ª—å–Ω–æ—Å—Ç—å –ø–æ IP-–∞–¥—Ä–µ—Å—É (–∏—Å–∫–ª—é—á–∞–µ–º —Å—Ç–∞—Ä—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å ip_address: null)
        const existingUserByIP = await User.findOne({ 
            ip_address: ipAddress,
            ip_address: { $ne: null } // –ò—Å–∫–ª—é—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å null IP
        });
        
        if (existingUserByIP) {
            console.warn(`–ü–æ–ø—ã—Ç–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ —Å —É–∂–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–Ω–æ–≥–æ IP: ${ipAddress}`);
            return res.status(403).json({ 
                message: '–° —ç—Ç–æ–≥–æ IP-–∞–¥—Ä–µ—Å–∞ —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω –∞–∫–∫–∞—É–Ω—Ç. –†–∞–∑—Ä–µ—à–µ–Ω —Ç–æ–ª—å–∫–æ –æ–¥–∏–Ω –∞–∫–∫–∞—É–Ω—Ç –Ω–∞ IP-–∞–¥—Ä–µ—Å.' 
            });
        }

        // 5. –°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        const newUser = new User({
            nickname,
            country,
            lat,
            lng,
            avatar,
            twitter_username: twitter_username.replace(/^@/, ''), // –£–±–∏—Ä–∞–µ–º @ –µ—Å–ª–∏ –µ—Å—Ç—å
            twitter_profile_url: twitter_profile_url || `https://twitter.com/${twitter_username.replace(/^@/, '')}`,
            ip_address: ipAddress // –°–æ—Ö—Ä–∞–Ω—è–µ–º IP-–∞–¥—Ä–µ—Å
        });

        await newUser.save();
        console.log(`–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${nickname} (@${twitter_username}) –∏–∑ ${country} —É—Å–ø–µ—à–Ω–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω!`);
        
        res.status(201).json({
            message: '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É—Å–ø–µ—à–Ω–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω!',
            user: newUser
        });

    } catch (error) {
        if (error.code === 11000) {
            console.warn('–ü–æ–ø—ã—Ç–∫–∞ –¥—É–±–ª–∏–∫–∞—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', error.message);
            
            // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∫–∞–∫–æ–µ –ø–æ–ª–µ –≤—ã–∑–≤–∞–ª–æ –¥—É–±–ª–∏–∫–∞—Ç
            if (error.message.includes('nickname')) {
                return res.status(409).json({ message: '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å —Ç–∞–∫–∏–º –Ω–∏–∫–Ω–µ–π–º–æ–º —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç.' });
            } else if (error.message.includes('twitter_username')) {
                return res.status(409).json({ message: '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å —Ç–∞–∫–∏–º Twitter –∞–∫–∫–∞—É–Ω—Ç–æ–º —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω.' });
            } else {
                return res.status(409).json({ message: '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å —Ç–∞–∫–∏–º–∏ –¥–∞–Ω–Ω—ã–º–∏ —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç.' });
            }
        }
        
        console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –≤ –ë–î:', error.message);
        return res.status(500).json({ 
            message: '–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞ –ø—Ä–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.',
            details: error.message 
        });
    }
});

// –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–π –º–∞—Ä—à—Ä—É—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ Twitter –∞–∫–∫–∞—É–Ω—Ç–∞ (–º–æ–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –Ω–∞ —Ñ—Ä–æ–Ω—Ç–µ–Ω–¥–µ)
app.post('/api/check-twitter', async (req, res) => {
    const { username } = req.body;
    
    if (!username) {
        return res.status(400).json({ message: 'Twitter username –Ω–µ —É–∫–∞–∑–∞–Ω.' });
    }
    
    try {
        const exists = await checkTwitterUsername(username);
        res.json({ exists, username: username.replace(/^@/, '') });
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ Twitter:', error);
        res.status(500).json({ message: '–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ Twitter –∞–∫–∫–∞—É–Ω—Ç–∞.' });
    }
});

// --- –ó–ê–ü–£–°–ö –°–ï–†–í–ï–†–ê ---
app.listen(port, () => {
    console.log(`–°–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω –Ω–∞ –ø–æ—Ä—Ç—É ${port}`);
});
