require('dotenv').config();
const express = require('express');
const axios = require('axios');
const cors = require('cors');
const mongoose = require('mongoose');

const app = express();
const port = process.env.PORT || 3000;

// --- –ü–û–î–ö–õ–Æ–ß–ï–ù–ò–ï –ö MONGODB ---
mongoose.connect(process.env.MONGODB_URI)
  .then(() => console.log('–ü–æ–¥–∫–ª—é—á–µ–Ω–æ –∫ MongoDB!'))
  .catch(err => console.error('–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ MongoDB:', err));

// --- –û–ü–†–ï–î–ï–õ–ï–ù–ò–ï –°–•–ï–ú–´ –ò –ú–û–î–ï–õ–ò MONGODB ---
const userSchema = new mongoose.Schema({
    nickname: { type: String, required: true, unique: true },
    country: { type: String, required: true },
    lat: { type: Number, required: true },
    lng: { type: Number, required: true },
    avatar: { type: String },
    twitter_username: { type: String, unique: true, sparse: true },
    twitter_profile_url: { type: String },
    ip_address: { type: String }
}, { timestamps: true });

const User = mongoose.model('User', userSchema);

// --- MIDDLEWARE ---
app.use(express.json());
app.use(express.urlencoded({ extended: true }));

// Middleware –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ä–µ–∞–ª—å–Ω–æ–≥–æ IP-–∞–¥—Ä–µ—Å–∞
app.use((req, res, next) => {
    req.realIP = req.headers['x-forwarded-for']?.split(',')[0] || 
                 req.headers['x-real-ip'] || 
                 req.connection.remoteAddress || 
                 req.socket.remoteAddress || 
                 req.ip;
    next();
});

// –ù–∞—Å—Ç—Ä–æ–π–∫–∞ CORS
app.use(cors({
    origin: ['https://mantlemap.xyz', 'http://localhost:8080'],
    methods: ['GET', 'POST'],
    allowedHeaders: ['Content-Type']
}));

// --- –î–û–ë–ê–í–õ–Ø–ï–ú –≠–ù–î–ü–û–ò–ù–¢ –î–õ–Ø –ü–û–õ–£–ß–ï–ù–ò–Ø –í–°–ï–• –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–ï–ô ---
app.get('/api/users', async (req, res) => {
    try {
        console.log('–ó–∞–ø—Ä–æ—Å –Ω–∞ –ø–æ–ª—É—á–µ–Ω–∏–µ –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π');
        
        const users = await User.find({}, {
            nickname: 1,
            country: 1,
            lat: 1,
            lng: 1,
            avatar: 1,
            twitter_username: 1,
            twitter_profile_url: 1,
            createdAt: 1
        }).sort({ createdAt: -1 });
        
        console.log(`–ù–∞–π–¥–µ–Ω–æ ${users.length} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π`);
        
        res.json({
            success: true,
            users: users,
            count: users.length
        });
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:', error);
        res.status(500).json({ 
            success: false,
            message: '–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π',
            error: error.message 
        });
    }
});

// --- –î–û–ë–ê–í–õ–Ø–ï–ú –ë–ê–ó–û–í–´–ô –≠–ù–î–ü–û–ò–ù–¢ –ü–†–û–í–ï–†–ö–ò –ó–î–û–†–û–í–¨–Ø ---
app.get('/api/health', (req, res) => {
    res.json({
        status: 'OK',
        timestamp: new Date().toISOString(),
        service: 'Mantle Map API'
    });
});

// --- –î–û–ë–ê–í–õ–Ø–ï–ú –≠–ù–î–ü–û–ò–ù–¢ –î–õ–Ø –ü–û–õ–£–ß–ï–ù–ò–Ø –°–¢–ê–¢–ò–°–¢–ò–ö–ò ---
app.get('/api/stats', async (req, res) => {
    try {
        const totalUsers = await User.countDocuments();
        const countryCounts = await User.aggregate([
            {
                $group: {
                    _id: '$country',
                    count: { $sum: 1 }
                }
            },
            {
                $sort: { count: -1 }
            }
        ]);
        
        res.json({
            success: true,
            totalUsers,
            countryCounts
        });
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏:', error);
        res.status(500).json({ 
            success: false,
            message: '–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏',
            error: error.message 
        });
    }
});

// --- –§–£–ù–ö–¶–ò–Ø –î–õ–Ø –ü–†–û–í–ï–†–ö–ò –ü–û–î–ü–ò–°–ö–ò –ù–ê MANTLE ---
async function checkIfUserFollowsMantle(userTwitterUsername) {
    const cleanUserTwitterUsername = userTwitterUsername.replace(/^@/, '');
    const mantleOfficialScreenName = 'Mantle_Official';

    console.log(`üîç –ü—Ä–æ–≤–µ—Ä—è–µ–º, –ø–æ–¥–ø–∏—Å–∞–Ω –ª–∏ @${cleanUserTwitterUsername} –Ω–∞ @${mantleOfficialScreenName}`);

    if (!process.env.RAPIDAPI_KEY) {
        console.warn('‚ö†Ô∏è RapidAPI –∫–ª—é—á –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω. –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–ø–∏—Å–∫–∏ –ø—Ä–æ–ø—É—â–µ–Ω–∞.');
        return false;
    }

    try {
        const url = `https://twitter-api45.p.rapidapi.com/checkfollow.php?user=${cleanUserTwitterUsername}&follows=${mantleOfficialScreenName}`;
        
        const options = {
            method: 'GET',
            headers: {
                'x-rapidapi-key': process.env.RAPIDAPI_KEY,
                'x-rapidapi-host': 'twitter-api45.p.rapidapi.com'
            },
            timeout: 8000
        };

        const response = await axios(url, options);
        const result = response.data;

        if (result && typeof result.is_follow === 'boolean') {
            if (result.is_follow === true) {
                console.log(`‚úÖ @${cleanUserTwitterUsername} –ø–æ–¥–ø–∏—Å–∞–Ω –Ω–∞ @${mantleOfficialScreenName}`);
                return true;
            } else {
                console.log(`‚ùå @${cleanUserTwitterUsername} –ù–ï –ø–æ–¥–ø–∏—Å–∞–Ω –Ω–∞ @${mantleOfficialScreenName}`);
                return false;
            }
        } else {
            console.warn(`‚ö†Ô∏è –ù–µ–æ–∂–∏–¥–∞–Ω–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –æ—Ç–≤–µ—Ç–∞ –æ—Ç RapidAPI:`, result);
            return false;
        }

    } catch (error) {
        console.error(`–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –ø–æ–¥–ø–∏—Å–∫–∏:`, error.response?.status, error.response?.data?.message || error.message);
        return false;
    }
}

// --- –§–£–ù–ö–¶–ò–Ø –î–õ–Ø –ü–†–û–í–ï–†–ö–ò –°–£–©–ï–°–¢–í–û–í–ê–ù–ò–Ø TWITTER –ê–ö–ö–ê–£–ù–¢–ê ---
async function checkTwitterUsername(username) {
    if (!username || username.trim() === '') {
        return false;
    }

    const cleanUsername = username.replace(/^@/, '');
    console.log(`üîç –ü—Ä–æ–≤–µ—Ä—è–µ–º Twitter –∞–∫–∫–∞—É–Ω—Ç: @${cleanUsername}`);
    
    // –ü—Ä–æ–≤–µ—Ä–∫–∞ —á–µ—Ä–µ–∑ –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ API
    const apiCheckResult = await checkTwitterMultipleAPIs(cleanUsername);
    if (apiCheckResult) {
        return true;
    }

    // –ü—Ä–æ–≤–µ—Ä–∫–∞ —á–µ—Ä–µ–∑ Nitter
    try {
        const publicResponse = await axios.get(`https://nitter.net/${cleanUsername}`, {
            timeout: 5000,
            validateStatus: function (status) {
                return status < 500;
            }
        });
        
        if (publicResponse.status === 200) {
            console.log(`‚úÖ Twitter –∞–∫–∫–∞—É–Ω—Ç @${cleanUsername} –Ω–∞–π–¥–µ–Ω —á–µ—Ä–µ–∑ Nitter`);
            return true;
        }
    } catch (error) {
        console.log(`‚ö†Ô∏è Nitter –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω –¥–ª—è @${cleanUsername}: ${error.message}`);
    }
    
    // –ü—Ä–æ–≤–µ—Ä–∫–∞ —á–µ—Ä–µ–∑ –ø—Ä—è–º–æ–π URL Twitter
    try {
        const twitterResponse = await axios.get(`https://twitter.com/${cleanUsername}`, {
            timeout: 5000,
            validateStatus: function (status) {
                return status < 500;
            },
            headers: {
                'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36'
            }
        });
        
        if (twitterResponse.status === 200 && 
            !twitterResponse.data.includes('This account doesn\'t exist') &&
            !twitterResponse.data.includes('Account suspended')) {
            console.log(`‚úÖ Twitter –∞–∫–∫–∞—É–Ω—Ç @${cleanUsername} –Ω–∞–π–¥–µ–Ω —á–µ—Ä–µ–∑ –ø—Ä—è–º—É—é –ø—Ä–æ–≤–µ—Ä–∫—É`);
            return true;
        }
    } catch (error) {
        console.log(`‚ö†Ô∏è –ü—Ä—è–º–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ Twitter –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞ –¥–ª—è @${cleanUsername}: ${error.message}`);
    }
    
    // –ü–æ—Å–ª–µ–¥–Ω—è—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —á–µ—Ä–µ–∑ whitelist
    return checkTwitterUsernameWhitelist(cleanUsername);
}

// --- –§–£–ù–ö–¶–ò–Ø WHITELIST –ü–†–û–í–ï–†–ö–ò ---
function checkTwitterUsernameWhitelist(username) {
    console.log(`üîç –ó–∞–ø—É—Å–∫ whitelist –ø—Ä–æ–≤–µ—Ä–∫–∏ –¥–ª—è @${username}`);
    
    // –û—á–µ–≤–∏–¥–Ω–æ –ø–æ–¥–¥–µ–ª—å–Ω—ã–µ –ø–∞—Ç—Ç–µ—Ä–Ω—ã
    const obviousSpamPatterns = [
        /^[a-z]{15,}$/,
        /^(.)\1{6,}$/,
        /^[qwertyuiop]{8,}$/i,
        /^[asdfghjkl]{8,}$/i,
        /^[zxcvbnm]{8,}$/i,
        /^test[0-9]{3,}$/i,
        /^user[0-9]{3,}$/i,
        /^[0-9]{10,}$/,
        /^[bcdfghjklmnpqrstvwxyz]{15,}$/i,
        /hjklfdsapoiuytrewq|mnbvcxzasdfgh/,
    ];
    
    for (const pattern of obviousSpamPatterns) {
        if (pattern.test(username)) {
            console.log(`‚ùå @${username} –æ—Ç–∫–ª–æ–Ω–µ–Ω –∫–∞–∫ —Å–ø–∞–º: ${pattern}`);
            return false;
        }
    }
    
    // –ü–æ–∑–∏—Ç–∏–≤–Ω—ã–µ –ø–∞—Ç—Ç–µ—Ä–Ω—ã
    const validPatterns = [
        /^0x[a-zA-Z][a-zA-Z0-9]{3,12}$/i,
        /^[a-zA-Z]{2,8}(eth|btc|crypto|nft|defi|web3|sol|ada|dot|bnb)$/i,
        /^(crypto|bitcoin|eth|nft|defi|web3)[a-zA-Z0-9_]{2,10}$/i,
        /^[a-zA-Z]{3,12}[0-9]{1,4}$/i,
        /^[a-zA-Z]{2,8}_[a-zA-Z]{2,8}$/i,
        /^[a-zA-Z]{3,12}_?[0-9]{1,3}$/i,
        /^(real|the|mr|ms|dr)[a-zA-Z]{3,12}$/i,
        /^[a-zA-Z]{3,12}(official|real|jr|sr)$/i,
        /^[a-zA-Z][a-zA-Z0-9_]{4,14}[a-zA-Z0-9]$/i,
    ];
    
    for (const pattern of validPatterns) {
        if (pattern.test(username)) {
            console.log(`‚úÖ @${username} –ø—Ä–∏–Ω—è—Ç –ø–æ –≤–∞–ª–∏–¥–Ω–æ–º—É –ø–∞—Ç—Ç–µ—Ä–Ω—É`);
            return true;
        }
    }
    
    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –æ—Å–º—ã—Å–ª–µ–Ω–Ω—ã–µ —á–∞—Å—Ç–∏
    const meaningfulParts = [
        'alex', 'andrew', 'john', 'mike', 'david', 'chris', 'anna', 'maria', 'lisa', 'sarah',
        'crypto', 'bitcoin', 'eth', 'trader', 'investor', 'dev', 'tech', 'hodl', 'moon',
        'defi', 'nft', 'web3', 'doge', 'shib', 'ada', 'dot', 'sol', 'bnb', 'matic'
    ];
    
    const lowerUsername = username.toLowerCase();
    const hasMeaningfulPart = meaningfulParts.some(part => 
        lowerUsername.includes(part) && username.length >= 4 && username.length <= 15
    );
    
    if (hasMeaningfulPart) {
        console.log(`‚úÖ @${username} –ø—Ä–∏–Ω—è—Ç - —Å–æ–¥–µ—Ä–∂–∏—Ç –æ—Å–º—ã—Å–ª–µ–Ω–Ω—É—é —á–∞—Å—Ç—å`);
        return true;
    }
    
    // –§–∏–Ω–∞–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞
    const isSuspicious = 
        username.length > 15 || 
        username.length < 3 || 
        /^[0-9]+$/.test(username) || 
        !/[a-zA-Z]/.test(username);
        
    if (!isSuspicious) {
        console.log(`‚úÖ @${username} –ø—Ä–∏–Ω—è—Ç - –Ω–µ –≤—ã–≥–ª—è–¥–∏—Ç –ø–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω–æ`);
        return true;
    }
    
    console.log(`‚ùå @${username} –æ—Ç–∫–ª–æ–Ω–µ–Ω - –Ω–µ –ø—Ä–æ—à–µ–ª –≤—Å–µ –ø—Ä–æ–≤–µ—Ä–∫–∏`);
    return false;
}

// --- –û–ë–ù–û–í–õ–ï–ù–ù–ê–Ø –§–£–ù–ö–¶–ò–Ø –° –†–ê–ë–û–ß–ò–ú–ò API ---
async function checkTwitterMultipleAPIs(username) {
    if (!process.env.RAPIDAPI_KEY) {
        console.log('‚ö†Ô∏è RapidAPI –∫–ª—é—á –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω');
        return null;
    }

    console.log(`üîß –ü—Ä–æ–≤–µ—Ä—è–µ–º @${username} —á–µ—Ä–µ–∑ –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ API`);

    const apis = [
        // 1. Twitter X API (–Ω–æ–≤—ã–π, –ø–æ–ø—É–ª—è—Ä–Ω—ã–π)
        {
            name: 'Twitter X API',
            url: `https://twitter-x.p.rapidapi.com/user/by/username/${username}`,
            headers: {
                'X-RapidAPI-Key': process.env.RAPIDAPI_KEY,
                'X-RapidAPI-Host': 'twitter-x.p.rapidapi.com'
            },
            checkSuccess: (data) => data && (data.data?.username || data.username)
        },
        
        // 2. Twitter AIO (–∞–∫—Ç–∏–≤–Ω–æ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è)
        {
            name: 'Twitter AIO',
            url: `https://twitter-aio.p.rapidapi.com/user/by/username/${username}`,
            headers: {
                'X-RapidAPI-Key': process.env.RAPIDAPI_KEY,
                'X-RapidAPI-Host': 'twitter-aio.p.rapidapi.com'
            },
            checkSuccess: (data) => data && (data.username || data.screen_name || data.user?.username)
        },
        
        // 3. Twitter v2.3 (T-Social)
        {
            name: 'Twitter v2.3',
            url: `https://twitter-v23.p.rapidapi.com/user/by/username/${username}`,
            headers: {
                'X-RapidAPI-Key': process.env.RAPIDAPI_KEY,
                'X-RapidAPI-Host': 'twitter-v23.p.rapidapi.com'
            },
            checkSuccess: (data) => data && (data.data?.username || data.username)
        },
        
        // 4. –°—Ç–∞—Ä—ã–µ API –∫–∞–∫ fallback
        {
            name: 'Twitter API v1 (fallback)',
            url: `https://twitter-api45.p.rapidapi.com/user.php?username=${username}`,
            headers: {
                'X-RapidAPI-Key': process.env.RAPIDAPI_KEY,
                'X-RapidAPI-Host': 'twitter-api45.p.rapidapi.com'
            },
            checkSuccess: (data) => data && (data.username || data.screen_name)
        }
    ];
    
    for (const api of apis) {
        try {
            console.log(`üîÑ –ü—Ä–æ–±—É–µ–º ${api.name} –¥–ª—è @${username}`);
            
            const response = await axios.get(api.url, {
                headers: api.headers,
                timeout: 10000
            });
            
            console.log(`üì° ${api.name} –æ—Ç–≤–µ—Ç–∏–ª: ${response.status}`);
            
            if (response.data) {
                // –ü—Ä–æ–≤–µ—Ä—è–µ–º —É—Å–ø–µ—Ö —á–µ—Ä–µ–∑ –∫–∞—Å—Ç–æ–º–Ω—É—é —Ñ—É–Ω–∫—Ü–∏—é
                if (api.checkSuccess(response.data)) {
                    console.log(`‚úÖ @${username} –Ω–∞–π–¥–µ–Ω —á–µ—Ä–µ–∑ ${api.name}`);
                    return true;
                }
                
                // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞ –æ—à–∏–±–∫–∏
                if (response.data.errors) {
                    const error = response.data.errors[0];
                    if (error.code === 50 || error.message?.includes('not found')) {
                        console.log(`‚ùå @${username} –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç (${api.name})`);
                        return false;
                    }
                    console.log(`‚ö†Ô∏è ${api.name} - –æ—à–∏–±–∫–∞:`, error);
                } else {
                    console.log(`‚ùì ${api.name} - –Ω–µ–æ–∂–∏–¥–∞–Ω–Ω—ã–π –æ—Ç–≤–µ—Ç:`, Object.keys(response.data));
                }
            }
            
        } catch (error) {
            const status = error.response?.status;
            const errorData = error.response?.data;
            
            console.log(`‚ùå ${api.name} - –û—à–∏–±–∫–∞ ${status}: ${error.message}`);
            
            if (status === 404) {
                console.log(`‚ùå @${username} –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç (404 –æ—Ç ${api.name})`);
                return false;
            } else if (status === 403) {
                console.log(`üö´ ${api.name} - –¥–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω (–≤–æ–∑–º–æ–∂–Ω–æ –∑–∞–∫–æ–Ω—á–∏–ª—Å—è –ª–∏–º–∏—Ç)`);
                if (errorData) console.log(`üìù –î–µ—Ç–∞–ª–∏:`, errorData);
            } else if (status === 429) {
                console.log(`‚è∞ ${api.name} - –ø—Ä–µ–≤—ã—à–µ–Ω –ª–∏–º–∏—Ç –∑–∞–ø—Ä–æ—Å–æ–≤`);
            } else if (status === 401) {
                console.log(`üîê ${api.name} - –ø—Ä–æ–±–ª–µ–º–∞ —Å –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–µ–π`);
            }
        }
    }
    
    console.log(`‚ùå –í—Å–µ API –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã –¥–ª—è @${username}`);
    return null;
}

// --- –§–£–ù–ö–¶–ò–Ø –ü–†–û–í–ï–†–ö–ò –°–¢–ê–¢–£–°–ê RAPIDAPI ---
async function checkRapidAPIStatus() {
    console.log('üîç –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å RapidAPI –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è...');
    
    if (!process.env.RAPIDAPI_KEY) {
        console.log('‚ùå RAPIDAPI_KEY –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è');
        return false;
    }
    
    try {
        // –ü—Ä–æ—Å—Ç–æ–π —Ç–µ—Å—Ç API
        const response = await axios.get('https://twitter-x.p.rapidapi.com/user/by/username/twitter', {
            headers: {
                'X-RapidAPI-Key': process.env.RAPIDAPI_KEY,
                'X-RapidAPI-Host': 'twitter-x.p.rapidapi.com'
            },
            timeout: 5000
        });
        
        console.log('‚úÖ RapidAPI –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —Ä–∞–±–æ—Ç–∞–µ—Ç');
        return true;
        
    } catch (error) {
        console.log('‚ùå –ü—Ä–æ–±–ª–µ–º–∞ —Å RapidAPI:', error.response?.status, error.message);
        
        if (error.response?.status === 403) {
            console.log('üîë –í–æ–∑–º–æ–∂–Ω—ã–µ –ø—Ä–∏—á–∏–Ω—ã 403:');
            console.log('   - –ù–µ–≤–µ—Ä–Ω—ã–π API –∫–ª—é—á');
            console.log('   - –ó–∞–∫–æ–Ω—á–∏–ª–∏—Å—å –∑–∞–ø—Ä–æ—Å—ã –Ω–∞ –±–µ—Å–ø–ª–∞—Ç–Ω–æ–º –ø–ª–∞–Ω–µ');
            console.log('   - API —Ç—Ä–µ–±—É–µ—Ç –ø–æ–¥–ø–∏—Å–∫–∏');
        }
        
        return false;
    }
}

// --- –≠–ù–î–ü–û–ò–ù–¢ –ü–†–û–í–ï–†–ö–ò RAPIDAPI –°–¢–ê–¢–£–°–ê ---
app.get('/api/rapidapi-status', async (req, res) => {
    const status = await checkRapidAPIStatus();
    res.json({ 
        working: status,
        key_configured: !!process.env.RAPIDAPI_KEY,
        key_preview: process.env.RAPIDAPI_KEY ? 
            process.env.RAPIDAPI_KEY.substring(0, 8) + '...' : 
            null
    });
});

// --- –≠–ù–î–ü–û–ò–ù–¢ –ü–†–û–í–ï–†–ö–ò TWITTER ---
app.post('/api/check-twitter', async (req, res) => {
    const { username } = req.body;
    
    if (!username) {
        return res.status(400).json({ message: 'Twitter username –Ω–µ —É–∫–∞–∑–∞–Ω.' });
    }
    
    try {
        const exists = await checkTwitterUsername(username);
        res.json({ exists, username: username.replace(/^@/, '') });
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ Twitter:', error);
        res.status(500).json({ message: '–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ Twitter –∞–∫–∫–∞—É–Ω—Ç–∞.' });
    }
});

// --- –≠–ù–î–ü–û–ò–ù–¢ –°–û–ó–î–ê–ù–ò–Ø –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–Ø ---
app.post('/api/users', async (req, res) => {
    const { nickname, country, lat, lng, avatar, twitter_username, twitter_profile_url } = req.body;
    const ipAddress = req.realIP;

    console.log('–ü–æ–ª—É—á–µ–Ω—ã –¥–∞–Ω–Ω—ã–µ:', { nickname, country, twitter_username, ip: ipAddress });

    // –í–∞–ª–∏–¥–∞—Ü–∏—è –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã—Ö –ø–æ–ª–µ–π
    if (!nickname || !country || lat === undefined || lng === undefined) {
        console.warn('–û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è:', { nickname, country, lat, lng });
        return res.status(400).json({ message: '–û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è (–Ω–∏–∫–Ω–µ–π–º, —Å—Ç—Ä–∞–Ω–∞ –∏–ª–∏ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã).' });
    }

    // –ü—Ä–æ–≤–µ—Ä–∫–∞ Twitter username
    if (!twitter_username || twitter_username.trim() === '') {
        return res.status(400).json({ message: 'Twitter username –æ–±—è–∑–∞—Ç–µ–ª–µ–Ω –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏.' });
    }

    try {
        // –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏—è Twitter –∞–∫–∫–∞—É–Ω—Ç–∞
        console.log(`–ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ Twitter –∞–∫–∫–∞—É–Ω—Ç–∞: @${twitter_username}`);
        const twitterExists = await checkTwitterUsername(twitter_username);
        
        if (!twitterExists) {
            return res.status(400).json({ 
                message: '–£–∫–∞–∑–∞–Ω–Ω—ã–π Twitter –∞–∫–∫–∞—É–Ω—Ç –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç. –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π Twitter.' 
            });
        }

        // –ü—Ä–æ–≤–µ—Ä–∫–∞ —É–Ω–∏–∫–∞–ª—å–Ω–æ—Å—Ç–∏ –ø–æ IP
        const existingUserByIP = await User.findOne({ 
            ip_address: ipAddress,
            ip_address: { $exists: true, $ne: null }
        });
        
        if (existingUserByIP) {
            console.warn(`–ü–æ–ø—ã—Ç–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ —Å —É–∂–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–Ω–æ–≥–æ IP: ${ipAddress}`);
            return res.status(403).json({ 
                message: '–° —ç—Ç–æ–≥–æ IP-–∞–¥—Ä–µ—Å–∞ —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω –∞–∫–∫–∞—É–Ω—Ç. –†–∞–∑—Ä–µ—à–µ–Ω —Ç–æ–ª—å–∫–æ –æ–¥–∏–Ω –∞–∫–∫–∞—É–Ω—Ç –Ω–∞ IP-–∞–¥—Ä–µ—Å.' 
            });
        }

        // –°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        const newUser = new User({
            nickname,
            country,
            lat,
            lng,
            avatar,
            twitter_username: twitter_username.replace(/^@/, ''),
            twitter_profile_url: twitter_profile_url || `https://twitter.com/${twitter_username.replace(/^@/, '')}`,
            ip_address: ipAddress
        });

        await newUser.save();
        console.log(`–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${nickname} (@${twitter_username}) –∏–∑ ${country} —É—Å–ø–µ—à–Ω–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω!`);
        
        res.status(201).json({
            message: '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É—Å–ø–µ—à–Ω–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω!',
            user: newUser
        });

    } catch (error) {
        if (error.code === 11000) {
            console.warn('–ü–æ–ø—ã—Ç–∫–∞ –¥—É–±–ª–∏–∫–∞—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', error.message);
            
            if (error.message.includes('nickname')) {
                return res.status(409).json({ message: '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å —Ç–∞–∫–∏–º –Ω–∏–∫–Ω–µ–π–º–æ–º —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç.' });
            } else if (error.message.includes('twitter_username')) {
                return res.status(409).json({ message: '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å —Ç–∞–∫–∏–º Twitter –∞–∫–∫–∞—É–Ω—Ç–æ–º —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω.' });
            } else {
                return res.status(409).json({ message: '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å —Ç–∞–∫–∏–º–∏ –¥–∞–Ω–Ω—ã–º–∏ —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç.' });
            }
        }
        
        console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –≤ –ë–î:', error.message);
        return res.status(500).json({ 
            message: '–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞ –ø—Ä–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.',
            details: error.message 
        });
    }
});

// --- MIDDLEWARE –î–õ–Ø –û–ë–†–ê–ë–û–¢–ö–ò 404 ---
app.use('*', (req, res) => {
    console.log(`404 - –ú–∞—Ä—à—Ä—É—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω: ${req.method} ${req.originalUrl}`);
    res.status(404).json({
        success: false,
        message: '–≠–Ω–¥–ø–æ–∏–Ω—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω',
        path: req.originalUrl,
        method: req.method,
        availableEndpoints: [
            'GET /api/health',
            'GET /api/users', 
            'POST /api/users',
            'GET /api/stats',
            'POST /api/check-twitter',
            'GET /api/rapidapi-status'
        ]
    });
});

// --- –ì–õ–û–ë–ê–õ–¨–ù–ê–Ø –û–ë–†–ê–ë–û–¢–ö–ê –û–®–ò–ë–û–ö ---
app.use((error, req, res, next) => {
    console.error('–ù–µ–æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞:', error);
    res.status(500).json({
        success: false,
        message: '–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞',
        error: process.env.NODE_ENV === 'development' ? error.message : '–ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫'
    });
});

// --- –ó–ê–ü–£–°–ö –°–ï–†–í–ï–†–ê ---
app.listen(port, () => {
    console.log(`–°–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω –Ω–∞ –ø–æ—Ä—Ç—É ${port}`);
    console.log('–î–æ—Å—Ç—É–ø–Ω—ã–µ —ç–Ω–¥–ø–æ–∏–Ω—Ç—ã:');
    console.log('  GET  /api/health        - –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–¥–æ—Ä–æ–≤—å—è —Å–µ—Ä–≤–µ—Ä–∞');
    console.log('  GET  /api/users         - –ü–æ–ª—É—á–∏—Ç—å –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π');
    console.log('  POST /api/users         - –°–æ–∑–¥–∞—Ç—å –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è');
    console.log('  GET  /api/stats         - –ü–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É');
    console.log('  POST /api/check-twitter - –ü—Ä–æ–≤–µ—Ä–∏—Ç—å Twitter –∞–∫–∫–∞—É–Ω—Ç');
    console.log('  GET  /api/rapidapi-status - –°—Ç–∞—Ç—É—Å RapidAPI');
});
